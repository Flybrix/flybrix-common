!function(){"use strict";angular.module("flybrixCommon",[])}(),function(){"use strict";function e(r,a){return{magnetometer:function(){return r("Calibrating magnetometer bias"),a.sendStructure("Command",{request_response:!0,set_calibration:{enabled:!0,mode:0}},!1)},accelerometer:{flat:e.bind(null,"flat",0),forward:e.bind(null,"lean forward",1),back:e.bind(null,"lean back",2),right:e.bind(null,"lean right",3),left:e.bind(null,"lean left",4)},finish:function(){return r("Finishing calibration"),a.sendStructure("Command",{request_response:!0,set_calibration:{enabled:!1,mode:0}},!1)}};function e(e,t){return r("Calibrating gravity for pose: "+e),a.sendStructure("Command",{request_response:!0,set_calibration:{enabled:!0,mode:t+1}},!1)}}angular.module("flybrixCommon").factory("calibration",e),e.$inject=["commandLog","serial"]}(),function(){"use strict";function e(e){void 0===e&&(e=2e3),this.N=e,this.buffer=new Uint8Array(e),this.ready_for_new_message=!0,this.buffer_length=0}function c(e){for(var t=0,r=0,a=0,n=!1;e.buffer[t];)a?(--a,e.buffer[r++]=e.buffer[t++]):(n&&(e.buffer[r++]=0),n=(a=e.buffer[t++]-1)<254);return a?0:r}function t(e){for(var t=new Uint8Array(Math.floor((255*e.byteLength+761)/254)),r=1,a=0,n=0;n<e.length;++n){254==t[a]&&(t[a]=255,t[a=r++]=0);var i=e[n];++t[a],i?t[r++]=i:t[a=r++]=0}return t.subarray(0,r).slice().buffer}angular.module("flybrixCommon").factory("cobs",function(){return{Reader:e,encode:t}}),e.prototype.AppendToBuffer=function(e,t,r){for(var a=0;a<e.length;a++){var n=e[a];if(this.ready_for_new_message&&(this.ready_for_new_message=!1,this.buffer_length=0),(this.buffer[this.buffer_length++]=n)&&this.buffer_length==this.N)r("overflow","buffer overflow in COBS decoding"),this.ready_for_new_message=!0;else if(!n){this.buffer_length=c(this);var i=0===this.buffer_length;i&&(this.buffer[0]=1);for(var o=1;o<this.buffer_length;++o)this.buffer[0]^=this.buffer[o];if(0===this.buffer[0])if(this.ready_for_new_message=!0,5<this.buffer_length){for(var s=this.buffer[1],_=0,u=0;u<4;++u)_|=this.buffer[u+2]<<8*u;t(s,_,this.buffer.subarray(6,this.buffer_length).slice().buffer)}else r("short","Too short packet");else{this.ready_for_new_message=!0;var l="",d="";for(o=0;o<this.buffer_length;o++)l+=this.buffer[o]+",",d+=String.fromCharCode(this.buffer[o]);if(i)r("frame","Unexpected ending of packet");else r("checksum","BAD CHECKSUM ("+this.buffer_length+" bytes)"+l+d)}}}}}(),function(){"use strict";function e(e){var t=[],r=e.defer(),a=n;return a.log=n,a.clearSubscribers=function(){r=e.defer()},a.onMessage=function(e){return r.promise.then(void 0,void 0,e)},a.read=i,a;function n(e){void 0!==e&&(t.push(e),r.notify(i()))}function i(){return t}}angular.module("flybrixCommon").factory("commandLog",e),e.$inject=["$q"]}(),function(){"use strict";function e(e){var t={},r=e,a=r.map([{key:"red",element:r.Uint8},{key:"green",element:r.Uint8},{key:"blue",element:r.Uint8}]),n=r.map([{key:"status",element:r.Uint16},{key:"pattern",element:r.Uint8},{key:"colors",element:r.map([{key:"right_front",element:a},{key:"right_back",element:a},{key:"left_front",element:a},{key:"left_back",element:a}])},{key:"indicator_red",element:r.bool},{key:"indicator_green",element:r.bool}]),i=r.array(3,r.Float32),o=(r.array(3,r.Uint8),r.array(6,r.Uint8)),s=r.array(6,r.Uint16),_=r.array(7,r.Float32),u=r.array(2,r.Float32),l=r.array(16,n,16),d=(r.string(9),[{part:0,key:"version",element:r.array(3,r.Uint8)},{part:1,key:"id",element:r.Uint32},{part:2,key:"pcbOrientation",element:i},{part:2,key:"pcbTranslation",element:i},{part:3,key:"mixTableFz",element:r.array(8,r.Int8)},{part:3,key:"mixTableTx",element:r.array(8,r.Int8)},{part:3,key:"mixTableTy",element:r.array(8,r.Int8)},{part:3,key:"mixTableTz",element:r.array(8,r.Int8)},{part:4,key:"magBias",element:i},{part:5,key:"assignedChannel",element:o},{part:5,key:"commandInversion",element:r.Uint8},{part:5,key:"channelMidpoint",element:s},{part:5,key:"channelDeadzone",element:s},{part:6,key:"thrustMasterPIDParameters",element:_},{part:6,key:"pitchMasterPIDParameters",element:_},{part:6,key:"rollMasterPIDParameters",element:_},{part:6,key:"yawMasterPIDParameters",element:_},{part:6,key:"thrustSlavePIDParameters",element:_},{part:6,key:"pitchSlavePIDParameters",element:_},{part:6,key:"rollSlavePIDParameters",element:_},{part:6,key:"yawSlavePIDParameters",element:_},{part:6,key:"pidBypass",element:r.Uint8},{part:7,key:"stateEstimationParameters",element:u},{part:7,key:"enableParameters",element:u},{part:8,key:"ledStates",element:l},{part:9,key:"name",element:r.string(9)}]);t["1.4.0"]=r.map(d.slice(),16);var c=[{part:6,key:"thrustGain",element:r.Float32},{part:6,key:"pitchGain",element:r.Float32},{part:6,key:"rollGain",element:r.Float32},{part:6,key:"yawGain",element:r.Float32}];d=d.slice(0,21).concat(c,d.slice(21)),t["1.5.0"]=r.map(d.slice(),16);var f=[{part:10,key:"forwardMasterPIDParameters",element:_},{part:10,key:"rightMasterPIDParameters",element:_},{part:10,key:"upMasterPIDParameters",element:_},{part:10,key:"forwardSlavePIDParameters",element:_},{part:10,key:"rightSlavePIDParameters",element:_},{part:10,key:"upSlavePIDParameters",element:_},{part:10,key:"velocityPidBypass",element:r.Uint8},{part:11,key:"inertialBiasAccel",element:i},{part:11,key:"inertialBiasGyro",element:i}];return d=d.concat(f),t["1.6.0"]=r.map(d.slice(),16),t}angular.module("flybrixCommon").factory("configHandler",e),e.$inject=["encodable"]}(),function(){"use strict";function e(m,s,p,g){var S,t=function(){s("No callback defined for receiving configurations!")},_=function(){s("No callback defined for receiving logging state! Callback arguments: (isLogging, isLocked, delay)")};function y(){var e=g.serializationHandler();return s("Requesting current configuration data..."),m.sendStructure("Command",{request_response:!0,req_partial_eeprom_data:e.ConfigurationFlag.empty()},!1)}function r(e,t,r,a,n){void 0===e&&(e=0),void 0===t&&(t=0),void 0===r&&(r=S);var i,o,s,_,u,l,d,c=a?m.field.COM_SET_PARTIAL_TEMPORARY_CONFIG:m.field.COM_SET_PARTIAL_EEPROM_DATA,f=(i=r,o=e,s=t,_=g.configHandler(),u=new Uint8Array(_.bytecount([s,o])),l=new DataView(u.buffer,0),d=new p.Serializer,_.encodePartial(l,d,i,[s,o]),u);return m.send(c,f,!1).then(function(){n&&y()})}function u(){g.set(S.version),g.supported()?(s("Received configuration data (v"+S.version[0]+"."+S.version[1]+"."+S.version[2]+")"),t()):(s("Received an unsupported configuration!"),s("Found version: "+S.version[0]+"."+S.version[1]+"."+S.version[2]+" --- Newest version: "+g.desiredKey()))}return m.setCommandCallback(function(e,t){var r,a;if(e&m.field.COM_SET_EEPROM_DATA&&(r=t,S=g.configHandler().decode(new DataView(r,0),new p.Serializer),u()),e&m.field.COM_SET_PARTIAL_EEPROM_DATA&&(a=t,S=g.configHandler().decodePartial(new DataView(a,0),new p.Serializer,angular.copy(S)),u()),e&(m.field.COM_SET_CARD_RECORDING|m.field.COM_SET_SD_WRITE_DELAY)){var n=new Uint8Array(t);if(3<=n.length){var i=n[0]|n[1]<<8,o=n[2];_(0!=(1&o),0!=(2&o),i)}else s("Bad data given for logging info")}}),S=g.configHandler().empty(),{request:y,reinit:function(){return s("Setting factory default configuration data..."),m.sendStructure("Command",{request_response:!0,reinit_eeprom_data:!0},!1).then(function(){return y()},function(e){s("Request for factory reset failed: "+e)})},send:function(e){return r(65535,65535,e,!1,!0)},sendPartial:r,getConfig:function(){return S},setConfigCallback:function(e){t=e},setLoggingCallback:function(e){_=e},getDesiredVersion:function(){return g.desired()},field:{VERSION:1,ID:2,PCB:4,MIX_TABLE:8,MAG_BIAS:16,CHANNEL:32,PID_PARAMETERS:64,STATE_PARAMETERS:128,LED_STATES:256,DEVICE_NAME:512,VELOCITY_PID_PARAMETERS:1024,INERTIAL_BIAS:2048}}}angular.module("flybrixCommon").factory("deviceConfig",e),e.$inject=["serial","commandLog","encodable","firmwareVersion"]}(),function(){angular.module("flybrixCommon").factory("encodable",function(){return i});var i={string:function(o){var s=r(o,i.Uint8);return new l(function(){return o},function(e,t,r){s.encode(e,t,(a=r,n=o,i=new Uint8Array(n),a.split("").forEach(function(e,t){i[t]=e.charCodeAt(0)}),i[n-1]=0,i));var a,n,i},function(e,t){return function(e,t){for(var r="",a=Math.min(e.length,t-1),n=0;n<a;++n){if(0===e[n])return r;r+=String.fromCharCode(e[n])}return r}(s.decode(e,t),o)},function(){return""})},map:function(e,t){var r;if(void 0===e.length)throw new Error("Map type requires an array of {key: String, element: Handler} maps");e.forEach(function(e){if(void 0===e.key||!(e.element instanceof l))throw new Error("Map type requires an array of {key: String, element: Handler} maps")}),void 0!==t&&e.forEach(function(e){if(void 0===e.part)throw new Error("Map type requires an array of {key: String, element: Handler, part: Number} maps when split bits are defined")});function a(t,r,a){e.forEach(function(e){e.element.encode(t,r,a[e.key])})}function n(t,r){var a={};return e.forEach(function(e){a[e.key]=e.element.decode(t,r)}),a}function i(){var t={};return e.forEach(function(e){t[e.key]=e.element.empty()}),t}if(void 0!==t){var o=u(t);r=new l(function(r){var a,n=!0;void 0!==r&&(a=r.pop(),n=!1);return e.reduce(function(e,t){return n||a&1<<t.part?e+t.element.bytecount(r):e},n?0:t/8)},a,n,i,function(t,r,a,n){var i=n.pop();o.encode(t,r,i),e.forEach(function(e){i&1<<e.part&&e.element.encodePartial(t,r,a[e.key],n)})},function(t,r,a){var n=o.decode(t,r),i={};return e.forEach(function(e){n&1<<e.part?i[e.key]=e.element.decodePartial(t,r,a[e.key]):i[e.key]=a[e.key]}),i})}else{r=new l(function(r){return e.reduce(function(e,t){return e+t.element.bytecount(r)},0)},a,n,i,function(t,r,a,n){e.forEach(function(e){e.element.encodePartial(t,r,a[e.key],n)})},function(t,r,a){var n={};return e.forEach(function(e){n[e.key]=e.element.decodePartial(t,r,a[e.key])}),n})}return r.children=e,r},array:r,polyarray:function(e,t){var r;if(void 0===e.length)throw new Error("Polyarray type requires an array of Handler objects");function a(r,a,n){e.forEach(function(e,t){e.encode(r,a,n[t])})}function n(r,a){var n=[];return e.forEach(function(e,t){n.push(e.decode(r,a))}),n}function i(){var t=[];return e.forEach(function(e){t.push(e.empty())}),t}e.forEach(function(e){if(!(e instanceof l))throw new Error("Polyarray type requires an array of Handler objects")});e.reduce(function(e,t){return e+t.bytecount},0);if(void 0!==t){var s=u(t);r=new l(function(a){var n,i=!0;void 0!==a&&(n=a.pop(),i=!1);return e.reduce(function(e,t,r){return i||n&1<<r?e+t.bytecount(a):e},i?0:t/8)},a,n,i,function(r,a,n,i){var o=i.pop();s.encode(r,a,o),e.forEach(function(e,t){o&1<<t&&e.encodePartial(r,a,n[t],i)})},function(r,a,n){var i=s.decode(r,a),o=[];return e.forEach(function(e,t){i&1<<t?o.push(e.decodePartial(r,a,n[t])):o.push(n[t])}),o})}else{r=new l(function(r){return e.reduce(function(e,t){return e+t.bytecount(r)},0)},a,n,i,function(r,a,n,i){e.forEach(function(e,t){e.encodePartial(r,a,n[t],i)})},function(r,a,n){var i=[];return e.forEach(function(e,t){i.push(e.decodePartial(r,a,n[t]))}),i})}return r.children=e,r},Serializer:e};function e(){this.index=0}function t(){return 0}function u(e){var t=i["Uint"+e];if(void 0===t)throw new Error("Unsupported split bit count: "+e+". Allowed counts: 8, 16, 32, 64");return t}function r(o,s,i){if(void 0===o)throw new Error("Array type requires length");if(!(s instanceof l))throw new Error("Array type requires Handler type as element");function e(e,t,r){for(var a=0;a<o;++a)s.encode(e,t,r[a])}function t(e,t){for(var r=[],a=0;a<o;++a)r.push(s.decode(e,t));return r}function r(){for(var e=[],t=0;t<o;++t)e.push(s.empty());return e}var a;if(void 0!==i){var _=u(i);a=new l(function(e){var t,r=!0;void 0!==e&&(t=e.pop(),r=!1);for(var a=r?0:i/8,n=0;n<o;++n)(r||t&1<<n)&&(a+=s.bytecount(e));return a},e,t,r,function(e,t,r,a){var n=a.pop();_.encode(e,t,n);for(var i=0;i<o;++i)n&1<<i&&s.encodePartial(e,t,r[i],a)},function(e,t,r){for(var a=_.decode(e,t),n=[],i=0;i<o;++i)a&1<<i?n.push(s.decodePartial(e,t,r[i])):n.push(r[i]);return n})}else{a=new l(function(e){for(var t=0,r=0;r<o;++r)t+=s.bytecount(e);return t},e,t,r,function(e,t,r,a){for(var n=0;n<o;++n)s.encodePartial(e,t,r[n],a)},function(e,t,r){for(var a=[],n=0;n<o;++n)a.push(s.decodePartial(e,t,r[n]));return a})}return a.children={element:s,count:o},a}function l(e,t,r,a,n,i){n=n||t,i=i||r,this.bytecount=e,this.encode=t,this.decode=r,this.encodePartial=n,this.decodePartial=i,this.empty=a}e.prototype.add=function(e){this.index+=e},["Uint","Int"].forEach(function(e){[1,2,4].forEach(function(a){var n=e+8*a;i[n]=new l(function(){return a},function(e,t,r){e["set"+n](t.index,r,1),t.add(a)},function(e,t){var r=e["get"+n](t.index,1);return t.add(a),r},t)})}),[4,8].forEach(function(a){var n="Float"+8*a;i[n]=new l(function(){return a},function(e,t,r){e["set"+n](t.index,r,1),t.add(a)},function(e,t){var r=e["get"+n](t.index,1);return t.add(a),r},t)}),i.bool=new l(function(){return 1},function(e,t,r){i.Uint8.encode(e,t,r?1:0)},function(e,t){return 0!==i.Uint8.decode(e,t)},function(){return!1})}(),function(){"use strict";function e(t,r){var a=[0,0,0],n="0.0.0",e={"1.4.0":!0,"1.5.0":!0,"1.6.0":!0},i=[1,6,0],o="1.6.0",s=t[o],_=s,u=r.getHandler(o),l=u,d={"1.4.0":134217727,"1.5.0":134217727,"1.6.0":134217727},c=4294967295;return{set:function(e){n=(a=e).join("."),_=t[n]||s,l=r.getHandler(o)||u,c=d[n]||4294967295},get:function(){return a},key:function(){return n},supported:function(){return!0===e[n]},desired:function(){return i},desiredKey:function(){return o},configHandler:function(){return _},serializationHandler:function(){return l},stateMask:function(){return c}}}angular.module("flybrixCommon").factory("firmwareVersion",e),e.$inject=["configHandler","serializationHandler"]}(),function(){"use strict";function e(s){var n={NO_OVERRIDE:0,FLASH:1,BEACON:2,BREATHE:3,ALTERNATE:4,SOLID:5},_=["right_front","right_back","left_front","left_back"],u={};_.forEach(function(e){u[e]={red:0,green:0,blue:0}});var l={status:65535,pattern:n.SOLID,colors:u,indicator_red:!1,indicator_green:!1},d={ledStates:[l]};function i(e,t,r,a,n,i,o){0<n&&n<6&&(l.pattern=n),[e,t,r,a].forEach(function(e,t){if(e){var r=u[_[t]];r.red=e.red,r.green=e.green,r.blue=e.blue}}),void 0!==i&&(l.indicator_red=i),void 0!==o&&(l.indicator_green=o),s.sendPartial(s.field.LED_STATES,1,d,!0)}return{set:i,setSimple:function(e,t,r){var a={red:e||0,green:t||0,blue:r||0};i(a,a,a,a,n.SOLID)},patterns:n}}angular.module("flybrixCommon").factory("led",e),e.$inject=["deviceConfig"]}(),function(){"use strict";function e(e,d,c){var t,r,f={State:0,Command:1,DebugString:3,HistoryData:4,Response:255},m={STATE_ALL:4294967295,STATE_NONE:0,STATE_MICROS:1,STATE_STATUS:2,STATE_V0:4,STATE_I0:8,STATE_I1:16,STATE_ACCEL:32,STATE_GYRO:64,STATE_MAG:128,STATE_TEMPERATURE:256,STATE_PRESSURE:512,STATE_RX_PPM:1024,STATE_AUX_CHAN_MASK:2048,STATE_COMMANDS:4096,STATE_F_AND_T:8192,STATE_PID_FZ_MASTER:16384,STATE_PID_TX_MASTER:32768,STATE_PID_TY_MASTER:65536,STATE_PID_TZ_MASTER:1<<17,STATE_PID_FZ_SLAVE:1<<18,STATE_PID_TX_SLAVE:1<<19,STATE_PID_TY_SLAVE:1<<20,STATE_PID_TZ_SLAVE:1<<21,STATE_MOTOR_OUT:1<<22,STATE_KINE_ANGLE:1<<23,STATE_KINE_RATE:1<<24,STATE_KINE_ALTITUDE:1<<25,STATE_LOOP_COUNT:1<<26},p=0,g=(r=(t=d).polyarray([t.Uint32,t.Float32,t.Float32,t.Float32,t.Float32,t.Float32]),t.map([{key:"timestamp_us",element:t.Uint32},{key:"status",element:t.Uint16},{key:"V0_raw",element:t.Uint16},{key:"I0_raw",element:t.Uint16},{key:"I1_raw",element:t.Uint16},{key:"accel",element:t.array(3,t.Float32)},{key:"gyro",element:t.array(3,t.Float32)},{key:"mag",element:t.array(3,t.Float32)},{key:"temperature",element:t.Uint16},{key:"pressure",element:t.Uint32},{key:"ppm",element:t.array(6,t.Int16)},{key:"AUX_chan_mask",element:t.Uint8},{key:"command",element:t.array(4,t.Int16)},{key:"control",element:t.array(4,t.Float32)},{key:"pid_master_Fz",element:r},{key:"pid_master_Tx",element:r},{key:"pid_master_Ty",element:r},{key:"pid_master_Tz",element:r},{key:"pid_slave_Fz",element:r},{key:"pid_slave_Tx",element:r},{key:"pid_slave_Ty",element:r},{key:"pid_slave_Tz",element:r},{key:"MotorOut",element:t.array(8,t.Int16)},{key:"kinematicsAngle",element:t.array(3,t.Float32)},{key:"kinematicsRate",element:t.array(3,t.Float32)},{key:"kinematicsAltitude",element:t.Float32},{key:"loopCount",element:t.Uint32}]));function S(e){return String.fromCharCode.apply(null,new Uint8Array(e))}return{processBinaryDatastream:function(e,a,u,l,t,r,n,i){!function(e,t,r,a,n,i,o,s){switch(e){case f.State:a(t,r);break;case f.Command:n(t,r);break;case f.DebugString:var _=S(r);i(_);break;case f.HistoryData:var _=S(r);o(_);break;case f.Response:var u=new DataView(r,0);s(t,u.getInt32(0,1))}}(e,a,u,function(){var n,e,t,i,o,s,_,r;n=a,e=u,t=l,i=g.empty(),o=[],s=new DataView(e,0),_=new d.Serializer,r=0,n&=c.stateMask(),g.children.forEach(function(e,t){if(n&1<<t){o[t]=!0;var r=e.element,a=e.key;i[a]=r.decode(s,_)}}),n&m.STATE_MICROS&&(r=1e6/(i.timestamp_us-p),p=i.timestamp_us),n&m.STATE_TEMPERATURE&&(i.temperature/=100),n&m.STATE_PRESSURE&&(i.pressure/=256),t(i,o,r)},t,r,n,i)},MessageType:f,CommandFields:{COM_REQ_RESPONSE:1,COM_SET_EEPROM_DATA:2,COM_REINIT_EEPROM_DATA:4,COM_REQ_EEPROM_DATA:8,COM_REQ_ENABLE_ITERATION:16,COM_MOTOR_OVERRIDE_SPEED_0:32,COM_MOTOR_OVERRIDE_SPEED_1:64,COM_MOTOR_OVERRIDE_SPEED_2:128,COM_MOTOR_OVERRIDE_SPEED_3:256,COM_MOTOR_OVERRIDE_SPEED_4:512,COM_MOTOR_OVERRIDE_SPEED_5:1024,COM_MOTOR_OVERRIDE_SPEED_6:2048,COM_MOTOR_OVERRIDE_SPEED_7:4096,COM_MOTOR_OVERRIDE_SPEED_ALL:8160,COM_SET_COMMAND_OVERRIDE:8192,COM_SET_STATE_MASK:16384,COM_SET_STATE_DELAY:32768,COM_SET_SD_WRITE_DELAY:65536,COM_SET_LED:1<<17,COM_SET_SERIAL_RC:1<<18,COM_SET_CARD_RECORDING:1<<19,COM_SET_PARTIAL_EEPROM_DATA:1<<20,COM_REINIT_PARTIAL_EEPROM_DATA:1<<21,COM_REQ_PARTIAL_EEPROM_DATA:1<<22,COM_REQ_CARD_RECORDING_STATE:1<<23,COM_SET_PARTIAL_TEMPORARY_CONFIG:1<<24,COM_SET_COMMAND_SOURCES:1<<25,COM_SET_CALIBRATION:1<<26},StatusCodes:{STATUS_BOOT:1,STATUS_MPU_FAIL:2,STATUS_BMP_FAIL:4,STATUS_RX_FAIL:8,STATUS_IDLE:16,STATUS_ENABLING:32,STATUS_CLEAR_MPU_BIAS:64,STATUS_SET_MPU_BIAS:128,STATUS_FAIL_STABILITY:256,STATUS_FAIL_ANGLE:512,STATUS_FAIL_OTHER:16384,STATUS_ENABLED:1024,STATUS_BATTERY_LOW:2048,STATUS_TEMP_WARNING:4096,STATUS_LOG_FULL:8192,STATUS_OVERRIDE:32768},StateFields:m}}angular.module("flybrixCommon").factory("parser",e),e.$inject=["commandLog","encodable","firmwareVersion"]}(),function(){"use strict";function e(a,e){var t=1,r=2,n=4,i=5,o=0,s=16711680,_=32768,u=16753920,l=255;function d(e){return{red:e>>16&255,green:e>>8&255,blue:255&e}}function c(e,t,r,a,n,i){return void 0===a&&(a=r),{status:e,pattern:t,colors:{right_front:r=d(r),right_back:r,left_front:a=d(a),left_back:a},indicator_red:n=n||!1,indicator_green:i=i||!1}}function f(e){var t=e>>16&255,r=e>>8&255,a=255&e;return t*=.9,r*=.9,a*=.9,Math.floor(t)<<16|Math.floor(r)<<8|Math.floor(a)}var m={pcbOrientation:[0,0,0],pcbTranslation:[0,0,0],magBias:[0,0,0],assignedChannel:[2,1,0,3,4,5],commandInversion:6,channelMidpoint:[1515,1515,1500,1520,1500,1500],channelDeadzone:[20,20,20,40,20,20],thrustMasterPIDParameters:[1,0,0,0,.005,.005,1],pitchMasterPIDParameters:[10,1,0,10,.005,.005,10],rollMasterPIDParameters:[10,1,0,10,.005,.005,10],yawMasterPIDParameters:[5,1,0,10,.005,.005,180],thrustSlavePIDParameters:[1,0,0,10,.001,.001,.3],pitchSlavePIDParameters:[10,4,0,30,.001,.001,30],rollSlavePIDParameters:[10,4,0,30,.001,.001,30],yawSlavePIDParameters:[30,5,0,20,.001,.001,240],thrustGain:4095,pitchGain:2047,rollGain:2047,yawGain:2047,pidBypass:25,stateEstimationParameters:[1,.01],enableParameters:[.001,30],ledStates:[c(e.StatusCodes.STATUS_MPU_FAIL,i,f(o),f(s),!0),c(e.StatusCodes.STATUS_BMP_FAIL,i,f(s),f(o),!0),c(e.StatusCodes.STATUS_BOOT,i,f(_)),c(e.StatusCodes.STATUS_RX_FAIL,t,f(u)),c(e.StatusCodes.STATUS_FAIL_OTHER,n,f(l)),c(e.StatusCodes.STATUS_FAIL_STABILITY,t,f(o),f(l)),c(e.StatusCodes.STATUS_FAIL_ANGLE,t,f(l),f(o)),c(e.StatusCodes.STATUS_OVERRIDE,r,f(s)),c(e.StatusCodes.STATUS_TEMP_WARNING,t,f(s)),c(e.StatusCodes.STATUS_BATTERY_LOW,r,f(u)),c(e.StatusCodes.STATUS_ENABLING,t,f(l)),c(e.StatusCodes.STATUS_ENABLED,r,f(l)),c(e.StatusCodes.STATUS_IDLE,r,f(_)),c(0,0,0),c(0,0,0),c(0,0,0)],name:"FLYBRIX",forwardMasterPIDParameters:[10,1,0,10,.005,.005,10],rightMasterPIDParameters:[10,1,0,10,.005,.005,10],upMasterPIDParameters:[10,1,0,10,.005,.005,10],forwardSlavePIDParameters:[10,4,0,30,.001,.001,30],rightSlavePIDParameters:[10,4,0,30,.001,.001,30],upSlavePIDParameters:[10,4,0,30,.001,.001,30],velocityPidBypass:119,inertialBiasAccel:[0,0,0],inertialBiasGyro:[0,0,0]};return{get:function(e){0<=(e=Math.floor(e))&&e<3||(e=0);var t=a.configHandler(),r={};switch(angular.copy(m),t.children.forEach(function(e){var t=e.key;r[t]=angular.copy(m[t])}),r.id=e,r.version=a.get().slice(),e){case 0:r.mixTableFz=[1,1,0,0,0,0,1,1],r.mixTableTx=[1,1,0,0,0,0,-1,-1],r.mixTableTy=[-1,1,0,0,0,0,-1,1],r.mixTableTz=[1,-1,0,0,0,0,-1,1];break;case 1:r.mixTableFz=[1,1,1,1,0,0,1,1],r.mixTableTx=[1,1,0,0,0,0,-1,-1],r.mixTableTy=[-1,1,-1,1,0,0,-1,1],r.mixTableTz=[1,-1,-1,1,0,0,1,-1];break;case 2:r.mixTableFz=[1,1,1,1,1,1,1,1],r.mixTableTx=[1,1,1,1,-1,-1,-1,-1],r.mixTableTy=[-1,1,-1,1,-1,1,-1,1],r.mixTableTz=[1,-1,-1,1,1,-1,-1,1]}return r}}}angular.module("flybrixCommon").factory("presets",e),e.$inject=["firmwareVersion","parser"]}(),function(){"use strict";function e(r){var e={LOW:0,MID:1,HIGH:2},a=["low","mid","high"],n=-1,i=0,o=0,s=0,_=e.HIGH,u=e.HIGH,l=!0;return{setThrottle:function(e){n=e},setPitch:function(e){i=e},setRoll:function(e){o=e},setYaw:function(e){s=e},setAux1:function(e){_=Math.max(0,Math.min(2,e))},setAux2:function(e){u=Math.max(0,Math.min(2,e))},getThrottle:function(){return n},getPitch:function(){return i},getRoll:function(){return o},getYaw:function(){return s},getAux1:function(){return _},getAux2:function(){return u},AUX:e,send:function(){if(!l&&r.busy())return;l=!1;var e={};e.throttle=d(4095*(n- -.8)/1.8,0,4095),e.pitch=d(4095*-c(i,.1)/2,-2047,2047),e.roll=d(4095*c(o,.1)/2,-2047,2047),e.yaw=d(4095*-c(s,.1)/2,-2047,2047);var t={};return t["aux1_"+a[_]]=!0,t["aux2_"+a[u]]=!0,r.sendStructure("Command",{request_response:!0,set_serial_rc:{enabled:!0,command:e,aux_mask:t}},!1)},forceNextSend:function(){l=!0}};function d(e,t,r){return Math.max(t,Math.min(e,r))}function c(e,t){return t<e?e-t:e<-t?e+t:0}}angular.module("flybrixCommon").factory("rcData",e),e.$inject=["serial"]}(),function(){"use strict";function e(f,m,p,g,S,y,v){var T=[],b=new e,a=function(){g("No state listener defined for serial")},n=function(){g("No command listener defined for serial")},i=function(){g("No debug listener defined for serial")},o=function(){g("No history listener defined for serial")},t=new p.Reader(2e3),r=void 0;function e(){}return e.prototype.busy=function(){return!1},e.prototype.send=function(e){g('No "send" defined for serial backend')},e.prototype.onRead=function(e){g('No "onRead" defined for serial backend')},{busy:function(){return b.busy()},field:S.CommandFields,send:s,sendStructure:function(e,t,r){var a=y.serializationHandler(),n=m.defer();if(!(e in S.MessageType))return n.reject('Message type "'+e+'" not supported by app, supported message types are:'+Object.keys(S.MessageType).join(", ")),n.promise;if(!(e in a))return n.reject('Message type "'+e+'" not supported by firmware, supported message types are:'+Object.keys(a).join(", ")),n.promise;var i=S.MessageType[e],o=a[e],s=new Uint8Array(o.byteCount),_=new v.Serializer(new DataView(s.buffer));o.encode(_,t);var u=o.maskArray(t);u.length<5&&(u=u[0]<<0|u[1]<<8|u[2]<<16|u[3]<<24);var l=_.index,d=new Uint8Array(l+3);d[0]=d[1]=i;for(var c=0;c<l;++c)d[0]^=d[c+2]=s[c];d[l+2]=0,T.push({mask:u,response:n}),f(function(){b.send(new Uint8Array(p.encode(d)))},0),r&&g("Sending command "+i);return n.promise},setBackend:function(e){(b=e).onRead=_},setStateCallback:function(e){a=e},setCommandCallback:function(e){n=e},setDebugCallback:function(e){i=e},setHistoryCallback:function(e){o=e},setDataHandler:function(e){r=e},handlePostConnect:function(){return s(S.CommandFields.COM_REQ_PARTIAL_EEPROM_DATA,[1,0,0,0])},Backend:e};function s(e,t,r){void 0===r&&(r=!1);var a=m.defer();e|=S.CommandFields.COM_REQ_RESPONSE;var n,i,o=0;if("object"==typeof t){var s=7+t.length;o^=(i=new Uint8Array(s))[1]=S.MessageType.Command;for(var _=0;_<4;++_)o^=i[_+2]=c(e,_);for(_=0;_<t.length;_++)o^=i[_+6]=t[_]}else{n=new ArrayBuffer(8),o^=(i=new Uint8Array(n))[1]=S.MessageType.Command;for(_=0;_<4;++_)o^=i[_+2]=c(e,_);o^=i[6]=t}return i[0]=o,i[i.length-1]=0,T.push({mask:e,response:a}),f(function(){b.send(new Uint8Array(p.encode(i)))},0),r&&g("Sending command "+S.MessageType.Command),a.promise}function _(e){r?r(e,d):t.AppendToBuffer(e,d,u)}function u(e,t){g("COBS decoding failed ("+e+"): "+t)}function l(e,t){for(;0<T.length;){var r=T.shift();if(r.mask===e){var a=e;if((a&=~S.CommandFields.COM_REQ_RESPONSE)!==t){r.response.reject("Request was not fully processed");break}r.response.resolve();break}r.response.reject("Missing ACK")}}function d(e,t,r){S.processBinaryDatastream(e,t,r,a,n,i,o,l)}function c(e,t){return e>>8*t&255}}angular.module("flybrixCommon").factory("serial",e),e.$inject=["$timeout","$q","cobs","commandLog","parser","firmwareVersion","serializationHandler"]}(),function(){"use strict";function e(){var t={};return t["1.4.0"]=FlybrixSerialization.parse("Vector3f = { x: f32, y: f32, z: f32 };PIDSettings = {kp: f32,ki: f32,kd: f32,integral_windup_guard: f32,d_filter_time: f32,setpoint_filter_time: f32,command_to_value: f32 };Version = { major: u8, minor: u8, patch: u8 };ConfigID = { id: u32 };PcbTransform = { orientation: Vector3f, translation: Vector3f };MixTable = { fz: [i8:8], tx: [i8:8], ty: [i8:8], tz: [i8:8] };MagBias = { offset: Vector3f };ChannelProperties = {assignment: [u8:6],inversion: u8,midpoint: [u16:6],deadzone: [u16:6] };PIDParameters = {thrust_master: PIDSettings,pitch_master: PIDSettings,roll_master: PIDSettings,yaw_master: PIDSettings,thrust_slave: PIDSettings,pitch_slave: PIDSettings,roll_slave: PIDSettings,yaw_slave: PIDSettings,pid_bypass: u8 };StateParameters = { state_estimation: [f32:2], enable: [f32:2] };Color = { red: u8, green: u8, blue: u8 };LEDStateCase = {status: u16,pattern: u8,color_right_front: Color,color_right_back: Color,color_left_front: Color,color_left_back: Color,indicator_red: bool,indicator_green: bool };LEDStates = { states: [/16/LEDStateCase:16] };LEDStatesFixed = { states: [LEDStateCase:16] };DeviceName = { value: s9 };Configuration = {/16/version: Version,config_id: ConfigID,pcb_transform: PcbTransform,mix_table: MixTable,mag_bias: MagBias,channel: ChannelProperties,pid_parameters: PIDParameters,state_parameters: StateParameters,led_states: LEDStates,device_name: DeviceName };ConfigurationFixed = {version: Version,config_id: ConfigID,pcb_transform: PcbTransform,mix_table: MixTable,mag_bias: MagBias,channel: ChannelProperties,pid_parameters: PIDParameters,state_parameters: StateParameters,led_states: LEDStatesFixed,device_name: DeviceName };ConfigurationFlag = {/16/version: void,config_id: void,pcb_transform: void,mix_table: void,mag_bias: void,channel: void,pid_parameters: void,state_parameters: void,led_states: [// void:16],device_name: void};Rotation = { roll: f32, pitch: f32, yaw: f32 };PIDState = {timestamp_us: u32,input: f32,setpoint: f32,p_term: f32,i_term: f32,d_term: f32 };RcCommand = { throttle: i16, pitch: i16, roll: i16, yaw: i16 };State = {/32/timestamp_us: u32,status: u16,v0_raw: u16,i0_raw: u16,i1_raw: u16,accel: Vector3f,gyro: Vector3f,mag: Vector3f,temperature: u16,pressure: u32,ppm: [i16:6],aux_chan_mask: u8,command: RcCommand,control: { fz: f32, tx: f32, ty: f32, tz: f32 },pid_master_fz: PIDState,pid_master_tx: PIDState,pid_master_ty: PIDState,pid_master_tz: PIDState,pid_slave_fz: PIDState,pid_slave_tx: PIDState,pid_slave_ty: PIDState,pid_slave_tz: PIDState,motor_out: [i16:8],kinematics_angle: Rotation,kinematics_rate: Rotation,kinematics_altitude: f32,loop_count: u32 };AuxMask = {//aux1_low: void,aux1_mid: void,aux1_high: void,aux2_low: void,aux2_mid: void,aux2_high: void };Command = {/32/request_response: void,set_eeprom_data: ConfigurationFixed,reinit_eeprom_data: void,request_eeprom_data: void,request_enable_iteration: u8,motor_override_speed_0: u16,motor_override_speed_1: u16,motor_override_speed_2: u16,motor_override_speed_3: u16,motor_override_speed_4: u16,motor_override_speed_5: u16,motor_override_speed_6: u16,motor_override_speed_7: u16,set_command_override: bool,set_state_mask: u32,set_state_delay: u16,set_sd_write_delay: u16,set_led: {  pattern: u8,  color_right: Color,  color_left: Color,  indicator_red: bool,  indicator_green: bool },set_serial_rc: { enabled: bool, command: RcCommand, aux_mask: AuxMask },set_card_recording_state: {/8/ record_to_card: void, lock_recording_state: void },set_partial_eeprom_data: Configuration,reinit_partial_eeprom_data: ConfigurationFlag,req_partial_eeprom_data: ConfigurationFlag,req_card_recording_state: void,set_partial_temporary_config: Configuration,set_command_sources: {/8/ serial: void, radio: void },set_calibration: { enabled: bool, mode: u8 },set_autopilot_enabled: bool,set_usb_mode: u8};DebugString = { depricated_mask: u32, message: s };HistoryData = DebugString;Response = { mask: u32, ack: u32 };"),t["1.5.0"]=t["1.5.1"]=FlybrixSerialization.parse("Vector3f = { x: f32, y: f32, z: f32 };PIDSettings = {kp: f32,ki: f32,kd: f32,integral_windup_guard: f32,d_filter_time: f32,setpoint_filter_time: f32,command_to_value: f32 };Version = { major: u8, minor: u8, patch: u8 };ConfigID = { id: u32 };PcbTransform = { orientation: Vector3f, translation: Vector3f };MixTable = { fz: [i8:8], tx: [i8:8], ty: [i8:8], tz: [i8:8] };MagBias = { offset: Vector3f };ChannelProperties = {assignment: [u8:6],inversion: u8,midpoint: [u16:6],deadzone: [u16:6] };PIDParameters = {thrust_master: PIDSettings,pitch_master: PIDSettings,roll_master: PIDSettings,yaw_master: PIDSettings,thrust_slave: PIDSettings,pitch_slave: PIDSettings,roll_slave: PIDSettings,yaw_slave: PIDSettings,thrust_gain: f32,pitch_gain: f32,roll_gain: f32,yaw_gain: f32,pid_bypass: u8 };StateParameters = { state_estimation: [f32:2], enable: [f32:2] };Color = { red: u8, green: u8, blue: u8 };LEDStateCase = {status: u16,pattern: u8,color_right_front: Color,color_right_back: Color,color_left_front: Color,color_left_back: Color,indicator_red: bool,indicator_green: bool };LEDStates = { states: [/16/LEDStateCase:16] };LEDStatesFixed = { states: [LEDStateCase:16] };DeviceName = { value: s9 };Configuration = {/16/version: Version,config_id: ConfigID,pcb_transform: PcbTransform,mix_table: MixTable,mag_bias: MagBias,channel: ChannelProperties,pid_parameters: PIDParameters,state_parameters: StateParameters,led_states: LEDStates,device_name: DeviceName };ConfigurationFixed = {version: Version,config_id: ConfigID,pcb_transform: PcbTransform,mix_table: MixTable,mag_bias: MagBias,channel: ChannelProperties,pid_parameters: PIDParameters,state_parameters: StateParameters,led_states: LEDStatesFixed,device_name: DeviceName };ConfigurationFlag = {/16/version: void,config_id: void,pcb_transform: void,mix_table: void,mag_bias: void,channel: void,pid_parameters: void,state_parameters: void,led_states: [// void:16],device_name: void,velocity_pid_parameters: void,inertial_bias: void };Rotation = { roll: f32, pitch: f32, yaw: f32 };PIDState = {timestamp_us: u32,input: f32,setpoint: f32,p_term: f32,i_term: f32,d_term: f32 };RcCommand = { throttle: i16, pitch: i16, roll: i16, yaw: i16 };State = {/32/timestamp_us: u32,status: u16,v0_raw: u16,i0_raw: u16,i1_raw: u16,accel: Vector3f,gyro: Vector3f,mag: Vector3f,temperature: u16,pressure: u32,ppm: [i16:6],aux_chan_mask: u8,command: RcCommand,control: { fz: f32, tx: f32, ty: f32, tz: f32 },pid_master_fz: PIDState,pid_master_tx: PIDState,pid_master_ty: PIDState,pid_master_tz: PIDState,pid_slave_fz: PIDState,pid_slave_tx: PIDState,pid_slave_ty: PIDState,pid_slave_tz: PIDState,motor_out: [i16:8],kinematics_angle: Rotation,kinematics_rate: Rotation,kinematics_altitude: f32,loop_count: u32 };AuxMask = {//aux1_low: void,aux1_mid: void,aux1_high: void,aux2_low: void,aux2_mid: void,aux2_high: void };Command = {/32/request_response: void,set_eeprom_data: ConfigurationFixed,reinit_eeprom_data: void,request_eeprom_data: void,request_enable_iteration: u8,motor_override_speed_0: u16,motor_override_speed_1: u16,motor_override_speed_2: u16,motor_override_speed_3: u16,motor_override_speed_4: u16,motor_override_speed_5: u16,motor_override_speed_6: u16,motor_override_speed_7: u16,set_command_override: bool,set_state_mask: u32,set_state_delay: u16,set_sd_write_delay: u16,set_led: {  pattern: u8,  color_right: Color,  color_left: Color,  indicator_red: bool,  indicator_green: bool },set_serial_rc: { enabled: bool, command: RcCommand, aux_mask: AuxMask },set_card_recording_state: {/8/ record_to_card: void, lock_recording_state: void },set_partial_eeprom_data: Configuration,reinit_partial_eeprom_data: ConfigurationFlag,req_partial_eeprom_data: ConfigurationFlag,req_card_recording_state: void,set_partial_temporary_config: Configuration,set_command_sources: {/8/ serial: void, radio: void },set_calibration: { enabled: bool, mode: u8 },set_autopilot_enabled: bool,set_usb_mode: u8};DebugString = { depricated_mask: u32, message: s };HistoryData = DebugString;Response = { mask: u32, ack: u32 };"),t["1.6.0"]=FlybrixSerialization.parse("Vector3f = { x: f32, y: f32, z: f32 };PIDSettings = {kp: f32,ki: f32,kd: f32,integral_windup_guard: f32,d_filter_time: f32,setpoint_filter_time: f32,command_to_value: f32 };Version = { major: u8, minor: u8, patch: u8 };ConfigID = { id: u32 };PcbTransform = { orientation: Vector3f, translation: Vector3f };MixTable = { fz: [i8:8], tx: [i8:8], ty: [i8:8], tz: [i8:8] };MagBias = { offset: Vector3f };ChannelProperties = {assignment: [u8:6],inversion: u8,midpoint: [u16:6],deadzone: [u16:6] };PIDParameters = {thrust_master: PIDSettings,pitch_master: PIDSettings,roll_master: PIDSettings,yaw_master: PIDSettings,thrust_slave: PIDSettings,pitch_slave: PIDSettings,roll_slave: PIDSettings,yaw_slave: PIDSettings,thrust_gain: f32,pitch_gain: f32,roll_gain: f32,yaw_gain: f32,pid_bypass: u8 };StateParameters = { state_estimation: [f32:2], enable: [f32:2] };Color = { red: u8, green: u8, blue: u8 };LEDStateCase = {status: u16,pattern: u8,color_right_front: Color,color_right_back: Color,color_left_front: Color,color_left_back: Color,indicator_red: bool,indicator_green: bool };LEDStates = { states: [/16/LEDStateCase:16] };LEDStatesFixed = { states: [LEDStateCase:16] };DeviceName = { value: s9 };InertialBias = { accel: Vector3f, gyro: Vector3f };VelocityPIDParameters = {forward_master: PIDSettings,right_master: PIDSettings,up_master: PIDSettings,forward_slave: PIDSettings,right_slave: PIDSettings,up_slave: PIDSettings,pid_bypass: u8 };Configuration = {/16/version: Version,config_id: ConfigID,pcb_transform: PcbTransform,mix_table: MixTable,mag_bias: MagBias,channel: ChannelProperties,pid_parameters: PIDParameters,state_parameters: StateParameters,led_states: LEDStates,device_name: DeviceName,velocity_pid_parameters: VelocityPIDParameters,inertial_bias: InertialBias };ConfigurationFixed = {version: Version,config_id: ConfigID,pcb_transform: PcbTransform,mix_table: MixTable,mag_bias: MagBias,channel: ChannelProperties,pid_parameters: PIDParameters,state_parameters: StateParameters,led_states: LEDStatesFixed,device_name: DeviceName,velocity_pid_parameters: VelocityPIDParameters,inertial_bias: InertialBias };ConfigurationFlag = {/16/version: void,config_id: void,pcb_transform: void,mix_table: void,mag_bias: void,channel: void,pid_parameters: void,state_parameters: void,led_states: [// void:16],device_name: void,velocity_pid_parameters: void,inertial_bias: void };Rotation = { roll: f32, pitch: f32, yaw: f32 };PIDState = {timestamp_us: u32,input: f32,setpoint: f32,p_term: f32,i_term: f32,d_term: f32 };RcCommand = { throttle: i16, pitch: i16, roll: i16, yaw: i16 };State = {/32/timestamp_us: u32,status: u16,v0_raw: u16,i0_raw: u16,i1_raw: u16,accel: Vector3f,gyro: Vector3f,mag: Vector3f,temperature: u16,pressure: u32,ppm: [i16:6],aux_chan_mask: u8,command: RcCommand,control: { fz: f32, tx: f32, ty: f32, tz: f32 },pid_master_fz: PIDState,pid_master_tx: PIDState,pid_master_ty: PIDState,pid_master_tz: PIDState,pid_slave_fz: PIDState,pid_slave_tx: PIDState,pid_slave_ty: PIDState,pid_slave_tz: PIDState,motor_out: [i16:8],kinematics_angle: Rotation,kinematics_rate: Rotation,kinematics_altitude: f32,loop_count: u32 };AuxMask = {//aux1_low: void,aux1_mid: void,aux1_high: void,aux2_low: void,aux2_mid: void,aux2_high: void };Command = {/32/request_response: void,set_eeprom_data: ConfigurationFixed,reinit_eeprom_data: void,request_eeprom_data: void,request_enable_iteration: u8,motor_override_speed_0: u16,motor_override_speed_1: u16,motor_override_speed_2: u16,motor_override_speed_3: u16,motor_override_speed_4: u16,motor_override_speed_5: u16,motor_override_speed_6: u16,motor_override_speed_7: u16,set_command_override: bool,set_state_mask: u32,set_state_delay: u16,set_sd_write_delay: u16,set_led: {  pattern: u8,  color_right: Color,  color_left: Color,  indicator_red: bool,  indicator_green: bool },set_serial_rc: { enabled: bool, command: RcCommand, aux_mask: AuxMask },set_card_recording_state: {/8/ record_to_card: void, lock_recording_state: void },set_partial_eeprom_data: Configuration,reinit_partial_eeprom_data: ConfigurationFlag,req_partial_eeprom_data: ConfigurationFlag,req_card_recording_state: void,set_partial_temporary_config: Configuration,set_command_sources: {/8/ serial: void, radio: void },set_calibration: { enabled: bool, mode: u8 },set_autopilot_enabled: bool,set_usb_mode: u8};DebugString = { depricated_mask: u32, message: s };HistoryData = DebugString;Response = { mask: u32, ack: u32 };"),{Serializer:FlybrixSerialization.Serializer,getHandler:function(e){return t[e]}}}e.$inject=[],angular.module("flybrixCommon").factory("serializationHandler",e)}();
//# sourceMappingURL=data:application/json;charset=utf8;base64,
