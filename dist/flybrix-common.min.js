!function(){"use strict";angular.module("flybrixCommon",[])}(),function(){"use strict";function e(i,r){return{magnetometer:function(){return i("Calibrating magnetometer bias"),r.sendStructure("Command",{request_response:!0,set_calibration:{enabled:!0,mode:0}},!1)},accelerometer:{flat:e.bind(null,"flat",0),forward:e.bind(null,"lean forward",1),back:e.bind(null,"lean back",2),right:e.bind(null,"lean right",3),left:e.bind(null,"lean left",4)},finish:function(){return i("Finishing calibration"),r.sendStructure("Command",{request_response:!0,set_calibration:{enabled:!1,mode:0}},!1)}};function e(e,t){return i("Calibrating gravity for pose: "+e),r.sendStructure("Command",{request_response:!0,set_calibration:{enabled:!0,mode:t+1}},!1)}}angular.module("flybrixCommon").factory("calibration",e),e.$inject=["commandLog","serial"]}(),function(){"use strict";function e(e){void 0===e&&(e=2e3),this.N=e,this.buffer=new Uint8Array(e),this.ready_for_new_message=!0,this.buffer_length=0}function d(e){for(var t=0,i=0,r=0,a=!1;e.buffer[t];)r?(--r,e.buffer[i++]=e.buffer[t++]):(a&&(e.buffer[i++]=0),a=(r=e.buffer[t++]-1)<254);return r?0:i}function t(e){for(var t=new Uint8Array(Math.floor((255*e.byteLength+761)/254)),i=1,r=0,a=0;a<e.length;++a){254==t[r]&&(t[r]=255,t[r=i++]=0);var o=e[a];++t[r],o?t[i++]=o:t[r=i++]=0}return t.subarray(0,i).slice().buffer}angular.module("flybrixCommon").factory("cobs",function(){return{Reader:e,encode:t}}),e.prototype.readBytes=function(e,t,i){for(var r=0;r<e.length;r++){var a=e[r];if(this.ready_for_new_message&&(this.ready_for_new_message=!1,this.buffer_length=0),this.buffer[this.buffer_length++]=a)this.buffer_length===this.N&&(i("overflow","buffer overflow in COBS decoding"),this.ready_for_new_message=!0);else{this.buffer_length=d(this);var o,n=0===this.buffer_length;for(n&&(this.buffer[0]=1),o=1;o<this.buffer_length;++o)this.buffer[0]^=this.buffer[o];if(0===this.buffer[0])this.ready_for_new_message=!0,0<this.buffer_length?t(this.buffer.slice(1,this.buffer_length)):i("short","Too short packet");else{this.ready_for_new_message=!0;var s="",_="";for(o=0;o<this.buffer_length;o++)s+=this.buffer[o]+",",_+=String.fromCharCode(this.buffer[o]);if(n)i("frame","Unexpected ending of packet");else i("checksum","BAD CHECKSUM ("+this.buffer_length+" bytes)"+s+_)}}}}}(),function(){"use strict";function e(e){var t=[],i=e.defer(),r=a;return r.log=a,r.clearSubscribers=function(){i=e.defer()},r.onMessage=function(e){return i.promise.then(void 0,void 0,e)},r.read=o,r;function a(e){void 0!==e&&(t.push(e),i.notify(o()))}function o(){return t}}angular.module("flybrixCommon").factory("commandLog",e),e.$inject=["$q"]}(),function(){"use strict";function e(n,t,s,i){var _,r=function(){t("No callback defined for receiving configurations!")},a=function(){t("No callback defined for receiving logging state! Callback arguments: (isLogging, isLocked, delay)")};function d(){var e=s.serializationHandler();return t("Requesting current configuration data..."),n.sendStructure("Command",{request_response:!0,req_partial_eeprom_data:e.ConfigurationFlag.empty()},!1)}function o(e){var t=s.serializationHandler(),i=e.mask||t.ConfigurationFlag.empty(),r=e.config||_,a=e.requestUpdate||!1,o={request_response:!0};return e.temporary?(o.set_partial_temporary_config=r,i={request_response:!0,set_partial_temporary_config:i}):(o.set_partial_eeprom_data=r,i={request_response:!0,set_partial_eeprom_data:i}),n.sendStructure("Command",o,!0,i).then(function(){a&&d()})}function u(e){_=i.updateFields(_,e),s.set(_.version),s.supported()?(t("Received configuration data (v"+_.version[0]+"."+_.version[1]+"."+_.version[2]+")"),r()):(t("Received an unsupported configuration!"),t("Found version: "+_.version[0]+"."+_.version[1]+"."+_.version[2]+" --- Newest version: "+s.desiredKey()))}return n.addOnReceiveCallback(function(e,t){if("Command"===e&&("set_eeprom_data"in t&&u(t.set_eeprom_data),"set_partial_eeprom_data"in t&&u(t.set_partial_eeprom_data),"set_card_recording_state"in t&&"set_sd_write_delay"in t)){var i=t.set_card_recording_state,r=t.set_sd_write_delay;a(i.record_to_card,i.lock_recording_state,r)}}),_=s.serializationHandler().Configuration.empty(),{request:d,reinit:function(){return t("Setting factory default configuration data..."),n.sendStructure("Command",{request_response:!0,reinit_eeprom_data:!0},!1).then(function(){return d()},function(e){t("Request for factory reset failed: "+e)})},send:function(e){return o({config:e,temporary:!1,requestUpdate:!0})},sendConfig:o,getConfig:function(){return _},setConfigCallback:function(e){r=e},setLoggingCallback:function(e){a=e},getDesiredVersion:function(){return s.desired()}}}angular.module("flybrixCommon").factory("deviceConfig",e),e.$inject=["serial","commandLog","firmwareVersion","serializationHandler"]}(),function(){"use strict";function e(t){var i=[0,0,0],r="0.0.0",e={"1.4.0":!0,"1.5.0":!0,"1.5.1":!0,"1.6.0":!0},a=[1,6,0],o="1.6.0",n=t.getHandler(o),s=n;return{set:function(e){r=(i=e).join("."),s=t.getHandler(o)||n},get:function(){return i},key:function(){return r},supported:function(){return!0===e[r]},desired:function(){return a},desiredKey:function(){return o},serializationHandler:function(){return s}}}angular.module("flybrixCommon").factory("firmwareVersion",e),e.$inject=["serializationHandler"]}(),function(){"use strict";function e(s,_){var a={NO_OVERRIDE:0,FLASH:1,BEACON:2,BREATHE:3,ALTERNATE:4,SOLID:5},d=["right_front","right_back","left_front","left_back"],u={};d.forEach(function(e){u[e]={red:0,green:0,blue:0}});var l={status:65535,pattern:a.SOLID,colors:u,indicator_red:!1,indicator_green:!1},c={led_states:[l]};function o(e,t,i,r,a,o,n){l.status=_.serializationHandler().StatusFlag.empty(),0<a&&a<6&&(l.pattern=a),[e,t,i,r].forEach(function(e,t){if(e){var i=u[d[t]];i.red=e.red,i.green=e.green,i.blue=e.blue}}),void 0!==o&&(l.indicator_red=o),void 0!==n&&(l.indicator_green=n),s.sendConfig({config:c,temporary:!0})}return{set:o,setSimple:function(e,t,i){var r={red:e||0,green:t||0,blue:i||0};o(r,r,r,r,a.SOLID)},patterns:a}}angular.module("flybrixCommon").factory("led",e),e.$inject=["deviceConfig","firmwareVersion"]}(),function(){"use strict";function e(i){var e={LOW:0,MID:1,HIGH:2},r=["low","mid","high"],a=-1,o=0,n=0,s=0,_=e.HIGH,d=e.HIGH,u=!0;return{setThrottle:function(e){a=e},setPitch:function(e){o=e},setRoll:function(e){n=e},setYaw:function(e){s=e},setAux1:function(e){_=Math.max(0,Math.min(2,e))},setAux2:function(e){d=Math.max(0,Math.min(2,e))},getThrottle:function(){return a},getPitch:function(){return o},getRoll:function(){return n},getYaw:function(){return s},getAux1:function(){return _},getAux2:function(){return d},AUX:e,send:function(){if(!u&&i.busy())return;u=!1;var e={};e.throttle=l(4095*(a- -.8)/1.8,0,4095),e.pitch=l(4095*-c(o,.1)/2,-2047,2047),e.roll=l(4095*c(n,.1)/2,-2047,2047),e.yaw=l(4095*-c(s,.1)/2,-2047,2047);var t={};return t["aux1_"+r[_]]=!0,t["aux2_"+r[d]]=!0,i.sendStructure("Command",{request_response:!0,set_serial_rc:{enabled:!0,command:e,aux_mask:t}},!1)},forceNextSend:function(){u=!0}};function l(e,t,i){return Math.max(t,Math.min(e,i))}function c(e,t){return t<e?e-t:e<-t?e+t:0}}angular.module("flybrixCommon").factory("rcData",e),e.$inject=["serial"]}(),function(){"use strict";function e(f,v,p,g,b,h){var y={State:0,Command:1,DebugString:3,HistoryData:4,Protocol:128,Response:255},S=[],D=new e,o=[],t=new p.Reader(1e4),i=void 0;function e(){}e.prototype.busy=function(){return!1},e.prototype.send=function(e){g('No "send" defined for serial backend')},e.prototype.onRead=function(e){g('No "onRead" defined for serial backend')};var n,s=[];return Object.keys(y).forEach(function(e){s[y[e]]=e}),d(function(e,t){if("Response"===e)!function(e,t){for(;0<S.length;){var i=S.shift();if(!(i.mask^e)){var r=e;if((r&=-2)^t){i.response.reject("Request was not fully processed");break}i.response.resolve();break}i.response.reject("Missing ACK")}}(t.mask,t.ack);else if("Protocol"===e){var i=t.response;i&&h.addHandler(i.version,i.structure)}}),{busy:function(){return D.busy()},sendStructure:r,setBackend:function(e){(D=e).onRead=a},addOnReceiveCallback:d,removeOnReceiveCallback:function(t){o=o.filter(function(e){return e!==t})},setBytesHandler:function(e){i=e},handlePostConnect:function(){return r("Command",{request_response:!0,req_partial_eeprom_data:{version:!0}})},Backend:e};function r(e,t,i,r){"State"===e&&(t=function(e){"temperature"in(e=Object.assign({},e))&&(e.temperature*=100);"pressure"in e&&(e.pressure*=256);return e}(t));var a=b.serializationHandler(),o=v.defer();if(!(e in y))return o.reject('Message type "'+e+'" not supported by app, supported message types are:'+Object.keys(y).join(", ")),o.promise;if(!(e in a))return o.reject('Message type "'+e+'" not supported by firmware, supported message types are:'+Object.keys(a).join(", ")),o.promise;var n=y[e],s=a[e],_=new Uint8Array(s.byteCount),d=new h.Serializer(new DataView(_.buffer));s.encode(d,t,r);var u=s.maskArray(t,r);u.length<5&&(u=u[0]<<0|u[1]<<8|u[2]<<16|u[3]<<24);var l=d.index,c=new Uint8Array(l+3);c[0]=c[1]=n;for(var m=0;m<l;++m)c[0]^=c[m+2]=_[m];return c[l+2]=0,S.push({mask:u,response:o}),f(function(){D.send(new Uint8Array(p.encode(c)))},0),i&&g("Sending command "+n),o.promise}function a(e){i?i(e,u):t.readBytes(e,u,_)}function _(e,t){g("COBS decoding failed ("+e+"): "+t)}function d(e){o=o.concat([e])}function u(e){var t=s[e[0]],i=b.serializationHandler()[t];if(t&&i){try{var r=new h.Serializer(new DataView(e.buffer,1)),a=i.decode(r)}catch(e){g("Unrecognized message format received")}"State"===t&&(a=function(e){e=Object.assign({},e);"timestamp_us"in e&&(e.serial_update_rate_estimate=1e6/(e.timestamp_us-n),n=e.timestamp_us);"temperature"in e&&(e.temperature/=100);"pressure"in e&&(e.pressure/=256);return e}(a)),o.forEach(function(e){e(t,a)})}else g("Illegal message type passed from firmware")}}angular.module("flybrixCommon").factory("serial",e),e.$inject=["$timeout","$q","cobs","commandLog","firmwareVersion","serializationHandler"]}(),function(){"use strict";function e(){var r={};function o(e,t){return t instanceof Array?function(e,t){for(var i=Math.max(e.length,t.length),r=[],a=0;a<i;++a)r.push(o(e[a],t[a]));return r}(e,t):t instanceof Object?(i=e,r=t,a={},Object.keys(i).forEach(function(e){a[e]=o(i[e],r[e])}),Object.keys(r).forEach(function(e){e in a||(a[e]=o(i[e],r[e]))}),a):null==t?e:t;var i,r,a}return r["1.4.0"]=FlybrixSerialization.parse("Vector3f = { x: f32, y: f32, z: f32 };PIDSettings = {kp: f32,ki: f32,kd: f32,integral_windup_guard: f32,d_filter_time: f32,setpoint_filter_time: f32,command_to_value: f32 };Version = { major: u8, minor: u8, patch: u8 };ConfigID = u32;PcbTransform = { orientation: Vector3f, translation: Vector3f };MixTable = { fz: [i8:8], tx: [i8:8], ty: [i8:8], tz: [i8:8] };MagBias = { offset: Vector3f };ChannelProperties = {assignment: [u8:6],inversion: u8,midpoint: [u16:6],deadzone: [u16:6] };PIDParameters = {thrust_master: PIDSettings,pitch_master: PIDSettings,roll_master: PIDSettings,yaw_master: PIDSettings,thrust_slave: PIDSettings,pitch_slave: PIDSettings,roll_slave: PIDSettings,yaw_slave: PIDSettings,pid_bypass: u8 };StateParameters = { state_estimation: [f32:2], enable: [f32:2] };StatusFlag = {/16/boot: void,mpu_fail: void,bmp_fail: void,rx_fail: void,idle: void,enabling: void,clear_mpu_bias: void,set_mpu_bias: void,fail_stability: void,fail_angle: void,enabled: void,battery_low: void,temp_warning: void,log_full: void,fail_other: void,override: void };Color = { red: u8, green: u8, blue: u8 };LEDStateCase = {status: StatusFlag,pattern: u8,color_right_front: Color,color_right_back: Color,color_left_front: Color,color_left_back: Color,indicator_red: bool,indicator_green: bool };LEDStates = [/16/LEDStateCase:16];LEDStatesFixed = [LEDStateCase:16];DeviceName = s9;Configuration = {/16/version: Version,config_id: ConfigID,pcb_transform: PcbTransform,mix_table: MixTable,mag_bias: MagBias,channel: ChannelProperties,pid_parameters: PIDParameters,state_parameters: StateParameters,led_states: LEDStates,device_name: DeviceName };ConfigurationFixed = {version: Version,config_id: ConfigID,pcb_transform: PcbTransform,mix_table: MixTable,mag_bias: MagBias,channel: ChannelProperties,pid_parameters: PIDParameters,state_parameters: StateParameters,led_states: LEDStatesFixed,device_name: DeviceName };ConfigurationFlag = {/16/version: void,config_id: void,pcb_transform: void,mix_table: void,mag_bias: void,channel: void,pid_parameters: void,state_parameters: void,led_states: [// void:16],device_name: void};Rotation = { roll: f32, pitch: f32, yaw: f32 };PIDState = {timestamp_us: u32,input: f32,setpoint: f32,p_term: f32,i_term: f32,d_term: f32 };RcCommand = { throttle: i16, pitch: i16, roll: i16, yaw: i16 };State = {/32/timestamp_us: u32,status: StatusFlag,v0_raw: u16,i0_raw: u16,i1_raw: u16,accel: Vector3f,gyro: Vector3f,mag: Vector3f,temperature: u16,pressure: u32,ppm: [i16:6],aux_chan_mask: u8,command: RcCommand,control: { fz: f32, tx: f32, ty: f32, tz: f32 },pid_master_fz: PIDState,pid_master_tx: PIDState,pid_master_ty: PIDState,pid_master_tz: PIDState,pid_slave_fz: PIDState,pid_slave_tx: PIDState,pid_slave_ty: PIDState,pid_slave_tz: PIDState,motor_out: [i16:8],kinematics_angle: Rotation,kinematics_rate: Rotation,kinematics_altitude: f32,loop_count: u32 };StateFields = {/32/timestamp_us: void,status: void,v0_raw: void,i0_raw: void,i1_raw: void,accel: void,gyro: void,mag: void,temperature: void,pressure: void,ppm: void,aux_chan_mask: void,command: void,control: void,pid_master_fz: void,pid_master_tx: void,pid_master_ty: void,pid_master_tz: void,pid_slave_fz: void,pid_slave_tx: void,pid_slave_ty: void,pid_slave_tz: void,motor_out: void,kinematics_angle: void,kinematics_rate: void,kinematics_altitude: void,loop_count: void };AuxMask = {//aux1_low: void,aux1_mid: void,aux1_high: void,aux2_low: void,aux2_mid: void,aux2_high: void };Command = {/32/request_response: void,set_eeprom_data: ConfigurationFixed,reinit_eeprom_data: void,request_eeprom_data: void,request_enable_iteration: u8,motor_override_speed_0: u16,motor_override_speed_1: u16,motor_override_speed_2: u16,motor_override_speed_3: u16,motor_override_speed_4: u16,motor_override_speed_5: u16,motor_override_speed_6: u16,motor_override_speed_7: u16,set_command_override: bool,set_state_mask: StateFields,set_state_delay: u16,set_sd_write_delay: u16,set_led: {  pattern: u8,  color_right: Color,  color_left: Color,  indicator_red: bool,  indicator_green: bool },set_serial_rc: { enabled: bool, command: RcCommand, aux_mask: AuxMask },set_card_recording_state: {/8/ record_to_card: void, lock_recording_state: void },set_partial_eeprom_data: Configuration,reinit_partial_eeprom_data: ConfigurationFlag,req_partial_eeprom_data: ConfigurationFlag,req_card_recording_state: void,set_partial_temporary_config: Configuration,set_command_sources: {/8/ serial: void, radio: void },set_calibration: { enabled: bool, mode: u8 },set_autopilot_enabled: bool,set_usb_mode: u8};DebugString = { deprecated_mask: u32, message: s };HistoryData = DebugString;Response = { mask: u32, ack: u32 };ProtocolInfo = { version: Version, structure: s };Protocol = {/32/ request: void, response: ProtocolInfo };"),r["1.5.0"]=r["1.5.1"]=FlybrixSerialization.parse("Vector3f = { x: f32, y: f32, z: f32 };PIDSettings = {kp: f32,ki: f32,kd: f32,integral_windup_guard: f32,d_filter_time: f32,setpoint_filter_time: f32,command_to_value: f32 };Version = { major: u8, minor: u8, patch: u8 };ConfigID = u32;PcbTransform = { orientation: Vector3f, translation: Vector3f };MixTable = { fz: [i8:8], tx: [i8:8], ty: [i8:8], tz: [i8:8] };MagBias = { offset: Vector3f };ChannelProperties = {assignment: [u8:6],inversion: u8,midpoint: [u16:6],deadzone: [u16:6] };PIDParameters = {thrust_master: PIDSettings,pitch_master: PIDSettings,roll_master: PIDSettings,yaw_master: PIDSettings,thrust_slave: PIDSettings,pitch_slave: PIDSettings,roll_slave: PIDSettings,yaw_slave: PIDSettings,thrust_gain: f32,pitch_gain: f32,roll_gain: f32,yaw_gain: f32,pid_bypass: u8 };StateParameters = { state_estimation: [f32:2], enable: [f32:2] };StatusFlag = {/16/boot: void,mpu_fail: void,bmp_fail: void,rx_fail: void,idle: void,enabling: void,clear_mpu_bias: void,set_mpu_bias: void,fail_stability: void,fail_angle: void,enabled: void,battery_low: void,temp_warning: void,log_full: void,fail_other: void,override: void };Color = { red: u8, green: u8, blue: u8 };LEDStateCase = {status: StatusFlag,pattern: u8,color_right_front: Color,color_right_back: Color,color_left_front: Color,color_left_back: Color,indicator_red: bool,indicator_green: bool };LEDStates = [/16/LEDStateCase:16];LEDStatesFixed = [LEDStateCase:16];DeviceName = s9;Configuration = {/16/version: Version,config_id: ConfigID,pcb_transform: PcbTransform,mix_table: MixTable,mag_bias: MagBias,channel: ChannelProperties,pid_parameters: PIDParameters,state_parameters: StateParameters,led_states: LEDStates,device_name: DeviceName };ConfigurationFixed = {version: Version,config_id: ConfigID,pcb_transform: PcbTransform,mix_table: MixTable,mag_bias: MagBias,channel: ChannelProperties,pid_parameters: PIDParameters,state_parameters: StateParameters,led_states: LEDStatesFixed,device_name: DeviceName };ConfigurationFlag = {/16/version: void,config_id: void,pcb_transform: void,mix_table: void,mag_bias: void,channel: void,pid_parameters: void,state_parameters: void,led_states: [// void:16],device_name: void,velocity_pid_parameters: void,inertial_bias: void };Rotation = { roll: f32, pitch: f32, yaw: f32 };PIDState = {timestamp_us: u32,input: f32,setpoint: f32,p_term: f32,i_term: f32,d_term: f32 };RcCommand = { throttle: i16, pitch: i16, roll: i16, yaw: i16 };State = {/32/timestamp_us: u32,status: StatusFlag,v0_raw: u16,i0_raw: u16,i1_raw: u16,accel: Vector3f,gyro: Vector3f,mag: Vector3f,temperature: u16,pressure: u32,ppm: [i16:6],aux_chan_mask: u8,command: RcCommand,control: { fz: f32, tx: f32, ty: f32, tz: f32 },pid_master_fz: PIDState,pid_master_tx: PIDState,pid_master_ty: PIDState,pid_master_tz: PIDState,pid_slave_fz: PIDState,pid_slave_tx: PIDState,pid_slave_ty: PIDState,pid_slave_tz: PIDState,motor_out: [i16:8],kinematics_angle: Rotation,kinematics_rate: Rotation,kinematics_altitude: f32,loop_count: u32 };StateFields = {/32/timestamp_us: void,status: void,v0_raw: void,i0_raw: void,i1_raw: void,accel: void,gyro: void,mag: void,temperature: void,pressure: void,ppm: void,aux_chan_mask: void,command: void,control: void,pid_master_fz: void,pid_master_tx: void,pid_master_ty: void,pid_master_tz: void,pid_slave_fz: void,pid_slave_tx: void,pid_slave_ty: void,pid_slave_tz: void,motor_out: void,kinematics_angle: void,kinematics_rate: void,kinematics_altitude: void,loop_count: void };AuxMask = {//aux1_low: void,aux1_mid: void,aux1_high: void,aux2_low: void,aux2_mid: void,aux2_high: void };Command = {/32/request_response: void,set_eeprom_data: ConfigurationFixed,reinit_eeprom_data: void,request_eeprom_data: void,request_enable_iteration: u8,motor_override_speed_0: u16,motor_override_speed_1: u16,motor_override_speed_2: u16,motor_override_speed_3: u16,motor_override_speed_4: u16,motor_override_speed_5: u16,motor_override_speed_6: u16,motor_override_speed_7: u16,set_command_override: bool,set_state_mask: StateFields,set_state_delay: u16,set_sd_write_delay: u16,set_led: {  pattern: u8,  color_right: Color,  color_left: Color,  indicator_red: bool,  indicator_green: bool },set_serial_rc: { enabled: bool, command: RcCommand, aux_mask: AuxMask },set_card_recording_state: {/8/ record_to_card: void, lock_recording_state: void },set_partial_eeprom_data: Configuration,reinit_partial_eeprom_data: ConfigurationFlag,req_partial_eeprom_data: ConfigurationFlag,req_card_recording_state: void,set_partial_temporary_config: Configuration,set_command_sources: {/8/ serial: void, radio: void },set_calibration: { enabled: bool, mode: u8 },set_autopilot_enabled: bool,set_usb_mode: u8};DebugString = { deprecated_mask: u32, message: s };HistoryData = DebugString;Response = { mask: u32, ack: u32 };ProtocolInfo = { version: Version, structure: s };Protocol = {/32/ request: void, response: ProtocolInfo };"),r["1.6.0"]=FlybrixSerialization.parse("Vector3f = { x: f32, y: f32, z: f32 };PIDSettings = {kp: f32,ki: f32,kd: f32,integral_windup_guard: f32,d_filter_time: f32,setpoint_filter_time: f32,command_to_value: f32 };Version = { major: u8, minor: u8, patch: u8 };ConfigID = u32;PcbTransform = { orientation: Vector3f, translation: Vector3f };MixTable = { fz: [i8:8], tx: [i8:8], ty: [i8:8], tz: [i8:8] };MagBias = { offset: Vector3f };ChannelProperties = {assignment: [u8:6],inversion: u8,midpoint: [u16:6],deadzone: [u16:6] };PIDParameters = {thrust_master: PIDSettings,pitch_master: PIDSettings,roll_master: PIDSettings,yaw_master: PIDSettings,thrust_slave: PIDSettings,pitch_slave: PIDSettings,roll_slave: PIDSettings,yaw_slave: PIDSettings,thrust_gain: f32,pitch_gain: f32,roll_gain: f32,yaw_gain: f32,pid_bypass: u8 };StateParameters = { state_estimation: [f32:2], enable: [f32:2] };StatusFlag = {/16/_0: void,_1: void,_2: void,no_signal: void,idle: void,arming: void,recording_sd: void,_7: void,loop_slow: void,_9: void,armed: void,battery_low: void,battery_critical: void,log_full: void,crash_detected: void,override: void };Color = { red: u8, green: u8, blue: u8 };LEDStateCase = {status: StatusFlag,pattern: u8,color_right_front: Color,color_right_back: Color,color_left_front: Color,color_left_back: Color,indicator_red: bool,indicator_green: bool };LEDStates = [/16/LEDStateCase:16];LEDStatesFixed = [LEDStateCase:16];DeviceName = s9;InertialBias = { accel: Vector3f, gyro: Vector3f };VelocityPIDParameters = {forward_master: PIDSettings,right_master: PIDSettings,up_master: PIDSettings,forward_slave: PIDSettings,right_slave: PIDSettings,up_slave: PIDSettings,pid_bypass: u8 };Configuration = {/16/version: Version,config_id: ConfigID,pcb_transform: PcbTransform,mix_table: MixTable,mag_bias: MagBias,channel: ChannelProperties,pid_parameters: PIDParameters,state_parameters: StateParameters,led_states: LEDStates,device_name: DeviceName,velocity_pid_parameters: VelocityPIDParameters,inertial_bias: InertialBias };ConfigurationFixed = {version: Version,config_id: ConfigID,pcb_transform: PcbTransform,mix_table: MixTable,mag_bias: MagBias,channel: ChannelProperties,pid_parameters: PIDParameters,state_parameters: StateParameters,led_states: LEDStatesFixed,device_name: DeviceName,velocity_pid_parameters: VelocityPIDParameters,inertial_bias: InertialBias };ConfigurationFlag = {/16/version: void,config_id: void,pcb_transform: void,mix_table: void,mag_bias: void,channel: void,pid_parameters: void,state_parameters: void,led_states: [// void:16],device_name: void,velocity_pid_parameters: void,inertial_bias: void };Rotation = { roll: f32, pitch: f32, yaw: f32 };PIDState = {timestamp_us: u32,input: f32,setpoint: f32,p_term: f32,i_term: f32,d_term: f32 };RcCommand = { throttle: i16, pitch: i16, roll: i16, yaw: i16 };State = {/32/timestamp_us: u32,status: StatusFlag,v0_raw: u16,i0_raw: u16,i1_raw: u16,accel: Vector3f,gyro: Vector3f,mag: Vector3f,temperature: u16,pressure: u32,ppm: [i16:6],aux_chan_mask: u8,command: RcCommand,control: { fz: f32, tx: f32, ty: f32, tz: f32 },pid_master_fz: PIDState,pid_master_tx: PIDState,pid_master_ty: PIDState,pid_master_tz: PIDState,pid_slave_fz: PIDState,pid_slave_tx: PIDState,pid_slave_ty: PIDState,pid_slave_tz: PIDState,motor_out: [i16:8],kinematics_angle: Rotation,kinematics_rate: Rotation,kinematics_altitude: f32,loop_count: u32 };StateFields = {/32/timestamp_us: void,status: void,v0_raw: void,i0_raw: void,i1_raw: void,accel: void,gyro: void,mag: void,temperature: void,pressure: void,ppm: void,aux_chan_mask: void,command: void,control: void,pid_master_fz: void,pid_master_tx: void,pid_master_ty: void,pid_master_tz: void,pid_slave_fz: void,pid_slave_tx: void,pid_slave_ty: void,pid_slave_tz: void,motor_out: void,kinematics_angle: void,kinematics_rate: void,kinematics_altitude: void,loop_count: void };AuxMask = {//aux1_low: void,aux1_mid: void,aux1_high: void,aux2_low: void,aux2_mid: void,aux2_high: void };Command = {/32/request_response: void,set_eeprom_data: ConfigurationFixed,reinit_eeprom_data: void,request_eeprom_data: void,request_enable_iteration: u8,motor_override_speed_0: u16,motor_override_speed_1: u16,motor_override_speed_2: u16,motor_override_speed_3: u16,motor_override_speed_4: u16,motor_override_speed_5: u16,motor_override_speed_6: u16,motor_override_speed_7: u16,set_command_override: bool,set_state_mask: StateFields,set_state_delay: u16,set_sd_write_delay: u16,set_led: {  pattern: u8,  color_right: Color,  color_left: Color,  indicator_red: bool,  indicator_green: bool },set_serial_rc: { enabled: bool, command: RcCommand, aux_mask: AuxMask },set_card_recording_state: {/8/ record_to_card: void, lock_recording_state: void },set_partial_eeprom_data: Configuration,reinit_partial_eeprom_data: ConfigurationFlag,req_partial_eeprom_data: ConfigurationFlag,req_card_recording_state: void,set_partial_temporary_config: Configuration,set_command_sources: {/8/ serial: void, radio: void },set_calibration: { enabled: bool, mode: u8 },set_autopilot_enabled: bool,set_usb_mode: u8};DebugString = { deprecated_mask: u32, message: s };HistoryData = DebugString;Response = { mask: u32, ack: u32 };ProtocolInfo = { version: Version, structure: s };Protocol = {/32/ request: void, response: ProtocolInfo };"),{Serializer:FlybrixSerialization.Serializer,getHandler:function(e){return r[e]},addHandler:function(e,t){var i=e.major.toString()+"."+e.minor.toString()+e.patch.toString();r[i]=FlybrixSerialization.parse(t)},updateFields:o}}e.$inject=[],angular.module("flybrixCommon").factory("serializationHandler",e)}();
//# sourceMappingURL=data:application/json;charset=utf8;base64,
