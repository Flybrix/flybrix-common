!function(){"use strict";angular.module("flybrixCommon",[])}(),function(){"use strict";function e(r,a){return{magnetometer:function(){return r("Calibrating magnetometer bias"),a.sendStructure("Command",{request_response:!0,set_calibration:{enabled:!0,mode:0}},!1)},accelerometer:{flat:e.bind(null,"flat",0),forward:e.bind(null,"lean forward",1),back:e.bind(null,"lean back",2),right:e.bind(null,"lean right",3),left:e.bind(null,"lean left",4)},finish:function(){return r("Finishing calibration"),a.sendStructure("Command",{request_response:!0,set_calibration:{enabled:!1,mode:0}},!1)}};function e(e,t){return r("Calibrating gravity for pose: "+e),a.sendStructure("Command",{request_response:!0,set_calibration:{enabled:!0,mode:t+1}},!1)}}angular.module("flybrixCommon").factory("calibration",e),e.$inject=["commandLog","serial"]}(),function(){"use strict";function e(e){void 0===e&&(e=2e3),this.N=e,this.buffer=new Uint8Array(e),this.ready_for_new_message=!0,this.buffer_length=0}function d(e){for(var t=0,r=0,a=0,i=!1;e.buffer[t];)a?(--a,e.buffer[r++]=e.buffer[t++]):(i&&(e.buffer[r++]=0),i=(a=e.buffer[t++]-1)<254);return a?0:r}function t(e){for(var t=new Uint8Array(Math.floor((255*e.byteLength+761)/254)),r=1,a=0,i=0;i<e.length;++i){254==t[a]&&(t[a]=255,t[a=r++]=0);var o=e[i];++t[a],o?t[r++]=o:t[a=r++]=0}return t.subarray(0,r).slice().buffer}angular.module("flybrixCommon").factory("cobs",function(){return{Reader:e,encode:t}}),e.prototype.readBytes=function(e,t,r){for(var a=0;a<e.length;a++){var i=e[a];if(this.ready_for_new_message&&(this.ready_for_new_message=!1,this.buffer_length=0),this.buffer[this.buffer_length++]=i)this.buffer_length===this.N&&(r("overflow","buffer overflow in COBS decoding"),this.ready_for_new_message=!0);else{this.buffer_length=d(this);var o,n=0===this.buffer_length;for(n&&(this.buffer[0]=1),o=1;o<this.buffer_length;++o)this.buffer[0]^=this.buffer[o];if(0===this.buffer[0])this.ready_for_new_message=!0,0<this.buffer_length?t(this.buffer.slice(1,this.buffer_length)):r("short","Too short packet");else{this.ready_for_new_message=!0;var s="",_="";for(o=0;o<this.buffer_length;o++)s+=this.buffer[o]+",",_+=String.fromCharCode(this.buffer[o]);if(n)r("frame","Unexpected ending of packet");else r("checksum","BAD CHECKSUM ("+this.buffer_length+" bytes)"+s+_)}}}}}(),function(){"use strict";function e(e){var t=[],r=e.defer(),a=i;return a.log=i,a.clearSubscribers=function(){r=e.defer()},a.onMessage=function(e){return r.promise.then(void 0,void 0,e)},a.read=o,a;function i(e){void 0!==e&&(t.push(e),r.notify(o()))}function o(){return t}}angular.module("flybrixCommon").factory("commandLog",e),e.$inject=["$q"]}(),function(){"use strict";function e(n,t,s,r){var _,a=function(){t("No callback defined for receiving configurations!")},i=function(){t("No callback defined for receiving logging state! Callback arguments: (isLogging, isLocked, delay)")};function d(){var e=s.serializationHandler();return t("Requesting current configuration data..."),n.sendStructure("Command",{request_response:!0,req_partial_eeprom_data:e.ConfigurationFlag.empty()},!1)}function o(e){var t=s.serializationHandler(),r=e.mask||t.ConfigurationFlag.empty(),a=e.config||_,i=e.requestUpdate||!1,o={request_response:!0};return e.temporary?o.set_partial_temporary_config=a:o.set_partial_eeprom_data=a,n.sendStructure("Command",o,!0,r).then(function(){i&&d()})}function u(e){_=r.updateFields(_,e),s.set(_.version),s.supported()?(t("Received configuration data (v"+_.version[0]+"."+_.version[1]+"."+_.version[2]+")"),a()):(t("Received an unsupported configuration!"),t("Found version: "+_.version[0]+"."+_.version[1]+"."+_.version[2]+" --- Newest version: "+s.desiredKey()))}return n.addOnReceiveCallback(function(e,t){if("Command"===e&&("set_eeprom_data"in t&&u(t.set_eeprom_data),"set_partial_eeprom_data"in t&&u(t.set_partial_eeprom_data),"set_card_recording_state"in t&&"set_sd_write_delay"in t)){var r=t.set_card_recording_state,a=t.set_sd_write_delay;i(r.record_to_card,r.lock_recording_state,a)}}),_=s.serializationHandler().Configuration.empty(),{request:d,reinit:function(){return t("Setting factory default configuration data..."),n.sendStructure("Command",{request_response:!0,reinit_eeprom_data:!0},!1).then(function(){return d()},function(e){t("Request for factory reset failed: "+e)})},send:function(e){return o({config:e,temporary:!1,requestUpdate:!0})},sendConfig:o,getConfig:function(){return _},setConfigCallback:function(e){a=e},setLoggingCallback:function(e){i=e},getDesiredVersion:function(){return s.desired()}}}angular.module("flybrixCommon").factory("deviceConfig",e),e.$inject=["serial","commandLog","firmwareVersion","serializationHandler"]}(),function(){"use strict";function e(t){var r=[0,0,0],a="0.0.0",e={"1.4.0":!0,"1.5.0":!0,"1.5.1":!0,"1.6.0":!0},i=[1,6,0],o="1.6.0",n=t.getHandler(o),s=n;return{set:function(e){a=(r=e).join("."),s=t.getHandler(o)||n},get:function(){return r},key:function(){return a},supported:function(){return!0===e[a]},desired:function(){return i},desiredKey:function(){return o},serializationHandler:function(){return s}}}angular.module("flybrixCommon").factory("firmwareVersion",e),e.$inject=["serializationHandler"]}(),function(){"use strict";function e(s,_){var i={NO_OVERRIDE:0,FLASH:1,BEACON:2,BREATHE:3,ALTERNATE:4,SOLID:5},d=["right_front","right_back","left_front","left_back"],u={};d.forEach(function(e){u[e]={red:0,green:0,blue:0}});var l={status:65535,pattern:i.SOLID,colors:u,indicator_red:!1,indicator_green:!1},f={led_states:[l]};function o(e,t,r,a,i,o,n){l.status=_.serializationHandler().StatusFlag.empty(),0<i&&i<6&&(l.pattern=i),[e,t,r,a].forEach(function(e,t){if(e){var r=u[d[t]];r.red=e.red,r.green=e.green,r.blue=e.blue}}),void 0!==o&&(l.indicator_red=o),void 0!==n&&(l.indicator_green=n),s.sendConfig({config:f,temporary:!0})}return{set:o,setSimple:function(e,t,r){var a={red:e||0,green:t||0,blue:r||0};o(a,a,a,a,i.SOLID)},patterns:i}}angular.module("flybrixCommon").factory("led",e),e.$inject=["deviceConfig","firmwareVersion"]}(),function(){"use strict";function e(r){var e={LOW:0,MID:1,HIGH:2},a=["low","mid","high"],i=-1,o=0,n=0,s=0,_=e.HIGH,d=e.HIGH,u=!0;return{setThrottle:function(e){i=e},setPitch:function(e){o=e},setRoll:function(e){n=e},setYaw:function(e){s=e},setAux1:function(e){_=Math.max(0,Math.min(2,e))},setAux2:function(e){d=Math.max(0,Math.min(2,e))},getThrottle:function(){return i},getPitch:function(){return o},getRoll:function(){return n},getYaw:function(){return s},getAux1:function(){return _},getAux2:function(){return d},AUX:e,send:function(){if(!u&&r.busy())return;u=!1;var e={};e.throttle=l(4095*(i- -.8)/1.8,0,4095),e.pitch=l(4095*-f(o,.1)/2,-2047,2047),e.roll=l(4095*f(n,.1)/2,-2047,2047),e.yaw=l(4095*-f(s,.1)/2,-2047,2047);var t={};return t["aux1_"+a[_]]=!0,t["aux2_"+a[d]]=!0,r.sendStructure("Command",{request_response:!0,set_serial_rc:{enabled:!0,command:e,aux_mask:t}},!1)},forceNextSend:function(){u=!0}};function l(e,t,r){return Math.max(t,Math.min(e,r))}function f(e,t){return t<e?e-t:e<-t?e+t:0}}angular.module("flybrixCommon").factory("rcData",e),e.$inject=["serial"]}(),function(){"use strict";function e(m,p,g,v,b,h){var y={State:0,Command:1,DebugString:3,HistoryData:4,Response:255},S=[],D=new e,o=[],t=new g.Reader(2e3),r=void 0;function e(){}e.prototype.busy=function(){return!1},e.prototype.send=function(e){v('No "send" defined for serial backend')},e.prototype.onRead=function(e){v('No "onRead" defined for serial backend')};var n,s=[];return Object.keys(y).forEach(function(e){s[y[e]]=e}),d(function(e,t){"Response"===e&&function(e,t){for(;0<S.length;){var r=S.shift();if(!(r.mask^e)){var a=e;if((a&=-2)^t){r.response.reject("Request was not fully processed");break}r.response.resolve();break}r.response.reject("Missing ACK")}}(t.mask,t.ack)}),{busy:function(){return D.busy()},sendStructure:a,setBackend:function(e){(D=e).onRead=i},addOnReceiveCallback:d,removeOnReceiveCallback:function(t){o=o.filter(function(e){return e===t})},setBytesHandler:function(e){r=e},handlePostConnect:function(){return a("Command",{request_response:!0,req_partial_eeprom_data:{version:!0}})},Backend:e};function a(e,t,r,a){"State"===e&&(t=function(e){"temperature"in(e=Object.assign({},e))&&(e.temperature*=100);"pressure"in e&&(e.pressure*=256);return e}(t));var i=b.serializationHandler(),o=p.defer();if(!(e in y))return o.reject('Message type "'+e+'" not supported by app, supported message types are:'+Object.keys(y).join(", ")),o.promise;if(!(e in i))return o.reject('Message type "'+e+'" not supported by firmware, supported message types are:'+Object.keys(i).join(", ")),o.promise;var n=y[e],s=i[e],_=new Uint8Array(s.byteCount),d=new h.Serializer(new DataView(_.buffer));s.encode(d,t,a);var u=s.maskArray(t,a);u.length<5&&(u=u[0]<<0|u[1]<<8|u[2]<<16|u[3]<<24);var l=d.index,f=new Uint8Array(l+3);f[0]=f[1]=n;for(var c=0;c<l;++c)f[0]^=f[c+2]=_[c];return f[l+2]=0,S.push({mask:u,response:o}),m(function(){D.send(new Uint8Array(g.encode(f)))},0),r&&v("Sending command "+n),o.promise}function i(e){r?r(e,u):t.readBytes(e,u,_)}function _(e,t){v("COBS decoding failed ("+e+"): "+t)}function d(e){o=o.concat([e])}function u(e){var t=s[e[0]],r=b.serializationHandler()[t];if(t&&r){var a=new h.Serializer(new DataView(e.buffer,1)),i=r.decode(a);"State"===t&&(i=function(e){e=Object.assign({},e);"timestamp_us"in e&&(e.serial_update_rate_estimate=1e6/(e.timestamp_us-n),n=e.timestamp_us);"temperature"in e&&(e.temperature/=100);"pressure"in e&&(e.pressure/=256);return e}(i)),o.forEach(function(e){e(t,i)})}else v("Illegal message type passed from firmware")}}angular.module("flybrixCommon").factory("serial",e),e.$inject=["$timeout","$q","cobs","commandLog","firmwareVersion","serializationHandler"]}(),function(){"use strict";function e(){var t={};function o(e,t){return t instanceof Array?function(e,t){for(var r=Math.max(e.length,t.length),a=[],i=0;i<r;++i)a.push(o(e[i],t[i]));return a}(e,t):t instanceof Object?(r=e,a=t,i={},Object.keys(r).forEach(function(e){i[e]=o(r[e],a[e])}),Object.keys(a).forEach(function(e){e in i||(i[e]=o(r[e],a[e]))}),i):null==t?e:t;var r,a,i}return t["1.4.0"]=FlybrixSerialization.parse("Vector3f = { x: f32, y: f32, z: f32 };PIDSettings = {kp: f32,ki: f32,kd: f32,integral_windup_guard: f32,d_filter_time: f32,setpoint_filter_time: f32,command_to_value: f32 };Version = { major: u8, minor: u8, patch: u8 };ConfigID = u32;PcbTransform = { orientation: Vector3f, translation: Vector3f };MixTable = { fz: [i8:8], tx: [i8:8], ty: [i8:8], tz: [i8:8] };MagBias = { offset: Vector3f };ChannelProperties = {assignment: [u8:6],inversion: u8,midpoint: [u16:6],deadzone: [u16:6] };PIDParameters = {thrust_master: PIDSettings,pitch_master: PIDSettings,roll_master: PIDSettings,yaw_master: PIDSettings,thrust_slave: PIDSettings,pitch_slave: PIDSettings,roll_slave: PIDSettings,yaw_slave: PIDSettings,pid_bypass: u8 };StateParameters = { state_estimation: [f32:2], enable: [f32:2] };StatusFlag = {/16/boot: void,mpu_fail: void,bmp_fail: void,rx_fail: void,idle: void,enabling: void,clear_mpu_bias: void,set_mpu_bias: void,fail_stability: void,fail_angle: void,enabled: void,battery_low: void,temp_warning: void,log_full: void,fail_other: void,override: void };Color = { red: u8, green: u8, blue: u8 };LEDStateCase = {status: StatusFlag,pattern: u8,color_right_front: Color,color_right_back: Color,color_left_front: Color,color_left_back: Color,indicator_red: bool,indicator_green: bool };LEDStates = [/16/LEDStateCase:16];LEDStatesFixed = [LEDStateCase:16];DeviceName = s9;Configuration = {/16/version: Version,config_id: ConfigID,pcb_transform: PcbTransform,mix_table: MixTable,mag_bias: MagBias,channel: ChannelProperties,pid_parameters: PIDParameters,state_parameters: StateParameters,led_states: LEDStates,device_name: DeviceName };ConfigurationFixed = {version: Version,config_id: ConfigID,pcb_transform: PcbTransform,mix_table: MixTable,mag_bias: MagBias,channel: ChannelProperties,pid_parameters: PIDParameters,state_parameters: StateParameters,led_states: LEDStatesFixed,device_name: DeviceName };ConfigurationFlag = {/16/version: void,config_id: void,pcb_transform: void,mix_table: void,mag_bias: void,channel: void,pid_parameters: void,state_parameters: void,led_states: [// void:16],device_name: void};Rotation = { roll: f32, pitch: f32, yaw: f32 };PIDState = {timestamp_us: u32,input: f32,setpoint: f32,p_term: f32,i_term: f32,d_term: f32 };RcCommand = { throttle: i16, pitch: i16, roll: i16, yaw: i16 };State = {/32/timestamp_us: u32,status: StatusFlag,v0_raw: u16,i0_raw: u16,i1_raw: u16,accel: Vector3f,gyro: Vector3f,mag: Vector3f,temperature: u16,pressure: u32,ppm: [i16:6],aux_chan_mask: u8,command: RcCommand,control: { fz: f32, tx: f32, ty: f32, tz: f32 },pid_master_fz: PIDState,pid_master_tx: PIDState,pid_master_ty: PIDState,pid_master_tz: PIDState,pid_slave_fz: PIDState,pid_slave_tx: PIDState,pid_slave_ty: PIDState,pid_slave_tz: PIDState,motor_out: [i16:8],kinematics_angle: Rotation,kinematics_rate: Rotation,kinematics_altitude: f32,loop_count: u32 };AuxMask = {//aux1_low: void,aux1_mid: void,aux1_high: void,aux2_low: void,aux2_mid: void,aux2_high: void };Command = {/32/request_response: void,set_eeprom_data: ConfigurationFixed,reinit_eeprom_data: void,request_eeprom_data: void,request_enable_iteration: u8,motor_override_speed_0: u16,motor_override_speed_1: u16,motor_override_speed_2: u16,motor_override_speed_3: u16,motor_override_speed_4: u16,motor_override_speed_5: u16,motor_override_speed_6: u16,motor_override_speed_7: u16,set_command_override: bool,set_state_mask: u32,set_state_delay: u16,set_sd_write_delay: u16,set_led: {  pattern: u8,  color_right: Color,  color_left: Color,  indicator_red: bool,  indicator_green: bool },set_serial_rc: { enabled: bool, command: RcCommand, aux_mask: AuxMask },set_card_recording_state: {/8/ record_to_card: void, lock_recording_state: void },set_partial_eeprom_data: Configuration,reinit_partial_eeprom_data: ConfigurationFlag,req_partial_eeprom_data: ConfigurationFlag,req_card_recording_state: void,set_partial_temporary_config: Configuration,set_command_sources: {/8/ serial: void, radio: void },set_calibration: { enabled: bool, mode: u8 },set_autopilot_enabled: bool,set_usb_mode: u8};DebugString = { deprecated_mask: u32, message: s };HistoryData = DebugString;Response = { mask: u32, ack: u32 };"),t["1.5.0"]=t["1.5.1"]=FlybrixSerialization.parse("Vector3f = { x: f32, y: f32, z: f32 };PIDSettings = {kp: f32,ki: f32,kd: f32,integral_windup_guard: f32,d_filter_time: f32,setpoint_filter_time: f32,command_to_value: f32 };Version = { major: u8, minor: u8, patch: u8 };ConfigID = u32;PcbTransform = { orientation: Vector3f, translation: Vector3f };MixTable = { fz: [i8:8], tx: [i8:8], ty: [i8:8], tz: [i8:8] };MagBias = { offset: Vector3f };ChannelProperties = {assignment: [u8:6],inversion: u8,midpoint: [u16:6],deadzone: [u16:6] };PIDParameters = {thrust_master: PIDSettings,pitch_master: PIDSettings,roll_master: PIDSettings,yaw_master: PIDSettings,thrust_slave: PIDSettings,pitch_slave: PIDSettings,roll_slave: PIDSettings,yaw_slave: PIDSettings,thrust_gain: f32,pitch_gain: f32,roll_gain: f32,yaw_gain: f32,pid_bypass: u8 };StateParameters = { state_estimation: [f32:2], enable: [f32:2] };StatusFlag = {/16/boot: void,mpu_fail: void,bmp_fail: void,rx_fail: void,idle: void,enabling: void,clear_mpu_bias: void,set_mpu_bias: void,fail_stability: void,fail_angle: void,enabled: void,battery_low: void,temp_warning: void,log_full: void,fail_other: void,override: void };Color = { red: u8, green: u8, blue: u8 };LEDStateCase = {status: StatusFlag,pattern: u8,color_right_front: Color,color_right_back: Color,color_left_front: Color,color_left_back: Color,indicator_red: bool,indicator_green: bool };LEDStates = [/16/LEDStateCase:16];LEDStatesFixed = [LEDStateCase:16];DeviceName = s9;Configuration = {/16/version: Version,config_id: ConfigID,pcb_transform: PcbTransform,mix_table: MixTable,mag_bias: MagBias,channel: ChannelProperties,pid_parameters: PIDParameters,state_parameters: StateParameters,led_states: LEDStates,device_name: DeviceName };ConfigurationFixed = {version: Version,config_id: ConfigID,pcb_transform: PcbTransform,mix_table: MixTable,mag_bias: MagBias,channel: ChannelProperties,pid_parameters: PIDParameters,state_parameters: StateParameters,led_states: LEDStatesFixed,device_name: DeviceName };ConfigurationFlag = {/16/version: void,config_id: void,pcb_transform: void,mix_table: void,mag_bias: void,channel: void,pid_parameters: void,state_parameters: void,led_states: [// void:16],device_name: void,velocity_pid_parameters: void,inertial_bias: void };Rotation = { roll: f32, pitch: f32, yaw: f32 };PIDState = {timestamp_us: u32,input: f32,setpoint: f32,p_term: f32,i_term: f32,d_term: f32 };RcCommand = { throttle: i16, pitch: i16, roll: i16, yaw: i16 };State = {/32/timestamp_us: u32,status: StatusFlag,v0_raw: u16,i0_raw: u16,i1_raw: u16,accel: Vector3f,gyro: Vector3f,mag: Vector3f,temperature: u16,pressure: u32,ppm: [i16:6],aux_chan_mask: u8,command: RcCommand,control: { fz: f32, tx: f32, ty: f32, tz: f32 },pid_master_fz: PIDState,pid_master_tx: PIDState,pid_master_ty: PIDState,pid_master_tz: PIDState,pid_slave_fz: PIDState,pid_slave_tx: PIDState,pid_slave_ty: PIDState,pid_slave_tz: PIDState,motor_out: [i16:8],kinematics_angle: Rotation,kinematics_rate: Rotation,kinematics_altitude: f32,loop_count: u32 };AuxMask = {//aux1_low: void,aux1_mid: void,aux1_high: void,aux2_low: void,aux2_mid: void,aux2_high: void };Command = {/32/request_response: void,set_eeprom_data: ConfigurationFixed,reinit_eeprom_data: void,request_eeprom_data: void,request_enable_iteration: u8,motor_override_speed_0: u16,motor_override_speed_1: u16,motor_override_speed_2: u16,motor_override_speed_3: u16,motor_override_speed_4: u16,motor_override_speed_5: u16,motor_override_speed_6: u16,motor_override_speed_7: u16,set_command_override: bool,set_state_mask: u32,set_state_delay: u16,set_sd_write_delay: u16,set_led: {  pattern: u8,  color_right: Color,  color_left: Color,  indicator_red: bool,  indicator_green: bool },set_serial_rc: { enabled: bool, command: RcCommand, aux_mask: AuxMask },set_card_recording_state: {/8/ record_to_card: void, lock_recording_state: void },set_partial_eeprom_data: Configuration,reinit_partial_eeprom_data: ConfigurationFlag,req_partial_eeprom_data: ConfigurationFlag,req_card_recording_state: void,set_partial_temporary_config: Configuration,set_command_sources: {/8/ serial: void, radio: void },set_calibration: { enabled: bool, mode: u8 },set_autopilot_enabled: bool,set_usb_mode: u8};DebugString = { deprecated_mask: u32, message: s };HistoryData = DebugString;Response = { mask: u32, ack: u32 };"),t["1.6.0"]=FlybrixSerialization.parse("Vector3f = { x: f32, y: f32, z: f32 };PIDSettings = {kp: f32,ki: f32,kd: f32,integral_windup_guard: f32,d_filter_time: f32,setpoint_filter_time: f32,command_to_value: f32 };Version = { major: u8, minor: u8, patch: u8 };ConfigID = u32;PcbTransform = { orientation: Vector3f, translation: Vector3f };MixTable = { fz: [i8:8], tx: [i8:8], ty: [i8:8], tz: [i8:8] };MagBias = { offset: Vector3f };ChannelProperties = {assignment: [u8:6],inversion: u8,midpoint: [u16:6],deadzone: [u16:6] };PIDParameters = {thrust_master: PIDSettings,pitch_master: PIDSettings,roll_master: PIDSettings,yaw_master: PIDSettings,thrust_slave: PIDSettings,pitch_slave: PIDSettings,roll_slave: PIDSettings,yaw_slave: PIDSettings,thrust_gain: f32,pitch_gain: f32,roll_gain: f32,yaw_gain: f32,pid_bypass: u8 };StateParameters = { state_estimation: [f32:2], enable: [f32:2] };StatusFlag = {/16/_0: void,_1: void,_2: void,no_signal: void,idle: void,arming: void,recording_sd: void,_7: void,loop_slow: void,_9: void,armed: void,battery_low: void,battery_critical: void,log_full: void,crash_detected: void,override: void };Color = { red: u8, green: u8, blue: u8 };LEDStateCase = {status: StatusFlag,pattern: u8,color_right_front: Color,color_right_back: Color,color_left_front: Color,color_left_back: Color,indicator_red: bool,indicator_green: bool };LEDStates = [/16/LEDStateCase:16];LEDStatesFixed = [LEDStateCase:16];DeviceName = s9;InertialBias = { accel: Vector3f, gyro: Vector3f };VelocityPIDParameters = {forward_master: PIDSettings,right_master: PIDSettings,up_master: PIDSettings,forward_slave: PIDSettings,right_slave: PIDSettings,up_slave: PIDSettings,pid_bypass: u8 };Configuration = {/16/version: Version,config_id: ConfigID,pcb_transform: PcbTransform,mix_table: MixTable,mag_bias: MagBias,channel: ChannelProperties,pid_parameters: PIDParameters,state_parameters: StateParameters,led_states: LEDStates,device_name: DeviceName,velocity_pid_parameters: VelocityPIDParameters,inertial_bias: InertialBias };ConfigurationFixed = {version: Version,config_id: ConfigID,pcb_transform: PcbTransform,mix_table: MixTable,mag_bias: MagBias,channel: ChannelProperties,pid_parameters: PIDParameters,state_parameters: StateParameters,led_states: LEDStatesFixed,device_name: DeviceName,velocity_pid_parameters: VelocityPIDParameters,inertial_bias: InertialBias };ConfigurationFlag = {/16/version: void,config_id: void,pcb_transform: void,mix_table: void,mag_bias: void,channel: void,pid_parameters: void,state_parameters: void,led_states: [// void:16],device_name: void,velocity_pid_parameters: void,inertial_bias: void };Rotation = { roll: f32, pitch: f32, yaw: f32 };PIDState = {timestamp_us: u32,input: f32,setpoint: f32,p_term: f32,i_term: f32,d_term: f32 };RcCommand = { throttle: i16, pitch: i16, roll: i16, yaw: i16 };State = {/32/timestamp_us: u32,status: StatusFlag,v0_raw: u16,i0_raw: u16,i1_raw: u16,accel: Vector3f,gyro: Vector3f,mag: Vector3f,temperature: u16,pressure: u32,ppm: [i16:6],aux_chan_mask: u8,command: RcCommand,control: { fz: f32, tx: f32, ty: f32, tz: f32 },pid_master_fz: PIDState,pid_master_tx: PIDState,pid_master_ty: PIDState,pid_master_tz: PIDState,pid_slave_fz: PIDState,pid_slave_tx: PIDState,pid_slave_ty: PIDState,pid_slave_tz: PIDState,motor_out: [i16:8],kinematics_angle: Rotation,kinematics_rate: Rotation,kinematics_altitude: f32,loop_count: u32 };AuxMask = {//aux1_low: void,aux1_mid: void,aux1_high: void,aux2_low: void,aux2_mid: void,aux2_high: void };Command = {/32/request_response: void,set_eeprom_data: ConfigurationFixed,reinit_eeprom_data: void,request_eeprom_data: void,request_enable_iteration: u8,motor_override_speed_0: u16,motor_override_speed_1: u16,motor_override_speed_2: u16,motor_override_speed_3: u16,motor_override_speed_4: u16,motor_override_speed_5: u16,motor_override_speed_6: u16,motor_override_speed_7: u16,set_command_override: bool,set_state_mask: u32,set_state_delay: u16,set_sd_write_delay: u16,set_led: {  pattern: u8,  color_right: Color,  color_left: Color,  indicator_red: bool,  indicator_green: bool },set_serial_rc: { enabled: bool, command: RcCommand, aux_mask: AuxMask },set_card_recording_state: {/8/ record_to_card: void, lock_recording_state: void },set_partial_eeprom_data: Configuration,reinit_partial_eeprom_data: ConfigurationFlag,req_partial_eeprom_data: ConfigurationFlag,req_card_recording_state: void,set_partial_temporary_config: Configuration,set_command_sources: {/8/ serial: void, radio: void },set_calibration: { enabled: bool, mode: u8 },set_autopilot_enabled: bool,set_usb_mode: u8};DebugString = { deprecated_mask: u32, message: s };HistoryData = DebugString;Response = { mask: u32, ack: u32 };"),{Serializer:FlybrixSerialization.Serializer,getHandler:function(e){return t[e]},updateFields:o}}e.$inject=[],angular.module("flybrixCommon").factory("serializationHandler",e)}();
//# sourceMappingURL=data:application/json;charset=utf8;base64,
