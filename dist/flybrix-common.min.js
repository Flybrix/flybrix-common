!function(){"use strict";angular.module("flybrixCommon",[])}(),function(){"use strict";function e(){return{versions:{"1.4.0":"1.4.txt","1.5.0":"1.5.txt","1.5.1":"1.5.txt","1.6.0":"1.6.txt"},files:{"1.4.txt":"Vector3f={x:f32,y:f32,z:f32};PIDSettings={kp:f32,ki:f32,kd:f32,integral_windup_guard:f32,d_filter_time:f32,setpoint_filter_time:f32,command_to_value:f32};Version={major:u8,minor:u8,patch:u8};ConfigID=u32;PcbTransform={orientation:Vector3f,translation:Vector3f};MixTable={fz:[i8:8],tx:[i8:8],ty:[i8:8],tz:[i8:8]};MagBias={offset:Vector3f};ChannelProperties={assignment:{thrust:u8,pitch:u8,roll:u8,yaw:u8,aux1:u8,aux2:u8},inversion:{/8/thrust:void,pitch:void,roll:void,yaw:void,aux1:void,aux2:void},midpoint:[u16:6],deadzone:[u16:6]};PIDBypass={/8/thrust_master:void,pitch_master:void,roll_master:void,yaw_master:void,thrust_slave:void,pitch_slave:void,roll_slave:void,yaw_slave:void};PIDParameters={thrust_master:PIDSettings,pitch_master:PIDSettings,roll_master:PIDSettings,yaw_master:PIDSettings,thrust_slave:PIDSettings,pitch_slave:PIDSettings,roll_slave:PIDSettings,yaw_slave:PIDSettings,pid_bypass:PIDBypass};StateParameters={state_estimation:[f32:2],enable:[f32:2]};StatusFlag={/16/boot:void,mpu_fail:void,bmp_fail:void,rx_fail:void,idle:void,enabling:void,clear_mpu_bias:void,set_mpu_bias:void,fail_stability:void,fail_angle:void,enabled:void,battery_low:void,temp_warning:void,log_full:void,fail_other:void,override:void};Color={red:u8,green:u8,blue:u8};LEDStateColors={right_front:Color,right_back:Color,left_front:Color,left_back:Color};LEDStateCase={status:StatusFlag,pattern:u8,colors:LEDStateColors,indicator_red:bool,indicator_green:bool};LEDStates=[/16/LEDStateCase:16];LEDStatesFixed=[LEDStateCase:16];DeviceName=s9;Configuration={/16/version:Version,id:ConfigID,pcb_transform:PcbTransform,mix_table:MixTable,mag_bias:MagBias,channel:ChannelProperties,pid_parameters:PIDParameters,state_parameters:StateParameters,led_states:LEDStates,name:DeviceName};ConfigurationFixed={version:Version,id:ConfigID,pcb_transform:PcbTransform,mix_table:MixTable,mag_bias:MagBias,channel:ChannelProperties,pid_parameters:PIDParameters,state_parameters:StateParameters,led_states:LEDStatesFixed,name:DeviceName};ConfigurationFlag={/16/version:void,id:void,pcb_transform:void,mix_table:void,mag_bias:void,channel:void,pid_parameters:void,state_parameters:void,led_states:[//void:16],name:void};Rotation={pitch:f32,roll:f32,yaw:f32};PIDState={timestamp_us:u32,input:f32,setpoint:f32,p_term:f32,i_term:f32,d_term:f32};RcCommand={throttle:i16,pitch:i16,roll:i16,yaw:i16};State={/32/timestamp_us:u32,status:StatusFlag,v0_raw:u16,i0_raw:u16,i1_raw:u16,accel:Vector3f,gyro:Vector3f,mag:Vector3f,temperature:u16,pressure:u32,ppm:[i16:6],aux_chan_mask:u8,command:RcCommand,control:{fz:f32,tx:f32,ty:f32,tz:f32},pid_master_fz:PIDState,pid_master_tx:PIDState,pid_master_ty:PIDState,pid_master_tz:PIDState,pid_slave_fz:PIDState,pid_slave_tx:PIDState,pid_slave_ty:PIDState,pid_slave_tz:PIDState,motor_out:[i16:8],kinematics_angle:Rotation,kinematics_rate:Rotation,kinematics_altitude:f32,loop_count:u32};StateFields={/32/timestamp_us:void,status:void,v0_raw:void,i0_raw:void,i1_raw:void,accel:void,gyro:void,mag:void,temperature:void,pressure:void,ppm:void,aux_chan_mask:void,command:void,control:void,pid_master_fz:void,pid_master_tx:void,pid_master_ty:void,pid_master_tz:void,pid_slave_fz:void,pid_slave_tx:void,pid_slave_ty:void,pid_slave_tz:void,motor_out:void,kinematics_angle:void,kinematics_rate:void,kinematics_altitude:void,loop_count:void};AuxMask={//aux1_low:void,aux1_mid:void,aux1_high:void,aux2_low:void,aux2_mid:void,aux2_high:void};Command={/32/request_response:void,set_eeprom_data:ConfigurationFixed,reinit_eeprom_data:void,request_eeprom_data:void,request_enable_iteration:u8,motor_override_speed_0:u16,motor_override_speed_1:u16,motor_override_speed_2:u16,motor_override_speed_3:u16,motor_override_speed_4:u16,motor_override_speed_5:u16,motor_override_speed_6:u16,motor_override_speed_7:u16,set_command_override:bool,set_state_mask:StateFields,set_state_delay:u16,set_sd_write_delay:u16,set_led:{pattern:u8,color_right:Color,color_left:Color,indicator_red:bool,indicator_green:bool},set_serial_rc:{enabled:bool,command:RcCommand,aux_mask:AuxMask},set_card_recording_state:{/8/record_to_card:void,lock_recording_state:void},set_partial_eeprom_data:Configuration,reinit_partial_eeprom_data:ConfigurationFlag,req_partial_eeprom_data:ConfigurationFlag,req_card_recording_state:void,set_partial_temporary_config:Configuration,set_command_sources:{/8/serial:void,radio:void},set_calibration:{enabled:bool,mode:u8},set_autopilot_enabled:bool,set_usb_mode:u8};DebugString={deprecated_mask:u32,message:s};HistoryData=DebugString;Response={mask:u32,ack:u32};","1.5.txt":"Vector3f={x:f32,y:f32,z:f32};PIDSettings={kp:f32,ki:f32,kd:f32,integral_windup_guard:f32,d_filter_time:f32,setpoint_filter_time:f32,command_to_value:f32};Version={major:u8,minor:u8,patch:u8};ConfigID=u32;PcbTransform={orientation:Vector3f,translation:Vector3f};MixTable={fz:[i8:8],tx:[i8:8],ty:[i8:8],tz:[i8:8]};MagBias={offset:Vector3f};ChannelProperties={assignment:{thrust:u8,pitch:u8,roll:u8,yaw:u8,aux1:u8,aux2:u8},inversion:{/8/thrust:void,pitch:void,roll:void,yaw:void,aux1:void,aux2:void},midpoint:[u16:6],deadzone:[u16:6]};PIDBypass={/8/thrust_master:void,pitch_master:void,roll_master:void,yaw_master:void,thrust_slave:void,pitch_slave:void,roll_slave:void,yaw_slave:void};PIDParameters={thrust_master:PIDSettings,pitch_master:PIDSettings,roll_master:PIDSettings,yaw_master:PIDSettings,thrust_slave:PIDSettings,pitch_slave:PIDSettings,roll_slave:PIDSettings,yaw_slave:PIDSettings,thrust_gain:f32,pitch_gain:f32,roll_gain:f32,yaw_gain:f32,pid_bypass:PIDBypass};StateParameters={state_estimation:[f32:2],enable:[f32:2]};StatusFlag={/16/boot:void,mpu_fail:void,bmp_fail:void,rx_fail:void,idle:void,enabling:void,clear_mpu_bias:void,set_mpu_bias:void,fail_stability:void,fail_angle:void,enabled:void,battery_low:void,temp_warning:void,log_full:void,fail_other:void,override:void};Color={red:u8,green:u8,blue:u8};LEDStateColors={right_front:Color,right_back:Color,left_front:Color,left_back:Color};LEDStateCase={status:StatusFlag,pattern:u8,colors:LEDStateColors,indicator_red:bool,indicator_green:bool};LEDStates=[/16/LEDStateCase:16];LEDStatesFixed=[LEDStateCase:16];DeviceName=s9;Configuration={/16/version:Version,id:ConfigID,pcb_transform:PcbTransform,mix_table:MixTable,mag_bias:MagBias,channel:ChannelProperties,pid_parameters:PIDParameters,state_parameters:StateParameters,led_states:LEDStates,name:DeviceName};ConfigurationFixed={version:Version,id:ConfigID,pcb_transform:PcbTransform,mix_table:MixTable,mag_bias:MagBias,channel:ChannelProperties,pid_parameters:PIDParameters,state_parameters:StateParameters,led_states:LEDStatesFixed,name:DeviceName};ConfigurationFlag={/16/version:void,id:void,pcb_transform:void,mix_table:void,mag_bias:void,channel:void,pid_parameters:void,state_parameters:void,led_states:[//void:16],name:void,velocity_pid_parameters:void,inertial_bias:void};Rotation={pitch:f32,roll:f32,yaw:f32};PIDState={timestamp_us:u32,input:f32,setpoint:f32,p_term:f32,i_term:f32,d_term:f32};RcCommand={throttle:i16,pitch:i16,roll:i16,yaw:i16};State={/32/timestamp_us:u32,status:StatusFlag,v0_raw:u16,i0_raw:u16,i1_raw:u16,accel:Vector3f,gyro:Vector3f,mag:Vector3f,temperature:u16,pressure:u32,ppm:[i16:6],aux_chan_mask:u8,command:RcCommand,control:{fz:f32,tx:f32,ty:f32,tz:f32},pid_master_fz:PIDState,pid_master_tx:PIDState,pid_master_ty:PIDState,pid_master_tz:PIDState,pid_slave_fz:PIDState,pid_slave_tx:PIDState,pid_slave_ty:PIDState,pid_slave_tz:PIDState,motor_out:[i16:8],kinematics_angle:Rotation,kinematics_rate:Rotation,kinematics_altitude:f32,loop_count:u32};StateFields={/32/timestamp_us:void,status:void,v0_raw:void,i0_raw:void,i1_raw:void,accel:void,gyro:void,mag:void,temperature:void,pressure:void,ppm:void,aux_chan_mask:void,command:void,control:void,pid_master_fz:void,pid_master_tx:void,pid_master_ty:void,pid_master_tz:void,pid_slave_fz:void,pid_slave_tx:void,pid_slave_ty:void,pid_slave_tz:void,motor_out:void,kinematics_angle:void,kinematics_rate:void,kinematics_altitude:void,loop_count:void};AuxMask={//aux1_low:void,aux1_mid:void,aux1_high:void,aux2_low:void,aux2_mid:void,aux2_high:void};Command={/32/request_response:void,set_eeprom_data:ConfigurationFixed,reinit_eeprom_data:void,request_eeprom_data:void,request_enable_iteration:u8,motor_override_speed_0:u16,motor_override_speed_1:u16,motor_override_speed_2:u16,motor_override_speed_3:u16,motor_override_speed_4:u16,motor_override_speed_5:u16,motor_override_speed_6:u16,motor_override_speed_7:u16,set_command_override:bool,set_state_mask:StateFields,set_state_delay:u16,set_sd_write_delay:u16,set_led:{pattern:u8,color_right:Color,color_left:Color,indicator_red:bool,indicator_green:bool},set_serial_rc:{enabled:bool,command:RcCommand,aux_mask:AuxMask},set_card_recording_state:{/8/record_to_card:void,lock_recording_state:void},set_partial_eeprom_data:Configuration,reinit_partial_eeprom_data:ConfigurationFlag,req_partial_eeprom_data:ConfigurationFlag,req_card_recording_state:void,set_partial_temporary_config:Configuration,set_command_sources:{/8/serial:void,radio:void},set_calibration:{enabled:bool,mode:u8},set_autopilot_enabled:bool,set_usb_mode:u8};DebugString={deprecated_mask:u32,message:s};HistoryData=DebugString;Response={mask:u32,ack:u32};","1.6.txt":"Vector3f={x:f32,y:f32,z:f32};PIDSettings={kp:f32,ki:f32,kd:f32,integral_windup_guard:f32,d_filter_time:f32,setpoint_filter_time:f32,command_to_value:f32};Version={major:u8,minor:u8,patch:u8};ConfigID=u32;PcbTransform={orientation:Vector3f,translation:Vector3f};MixTable={fz:[i8:8],tx:[i8:8],ty:[i8:8],tz:[i8:8]};MagBias={offset:Vector3f};ChannelProperties={assignment:{thrust:u8,pitch:u8,roll:u8,yaw:u8,aux1:u8,aux2:u8},inversion:{/8/thrust:void,pitch:void,roll:void,yaw:void,aux1:void,aux2:void},midpoint:[u16:6],deadzone:[u16:6]};PIDBypass={/8/thrust_master:void,pitch_master:void,roll_master:void,yaw_master:void,thrust_slave:void,pitch_slave:void,roll_slave:void,yaw_slave:void};PIDParameters={thrust_master:PIDSettings,pitch_master:PIDSettings,roll_master:PIDSettings,yaw_master:PIDSettings,thrust_slave:PIDSettings,pitch_slave:PIDSettings,roll_slave:PIDSettings,yaw_slave:PIDSettings,thrust_gain:f32,pitch_gain:f32,roll_gain:f32,yaw_gain:f32,pid_bypass:PIDBypass};StateParameters={state_estimation:[f32:2],enable:[f32:2]};StatusFlag={/16/_0:void,_1:void,_2:void,no_signal:void,idle:void,arming:void,recording_sd:void,_7:void,loop_slow:void,_9:void,armed:void,battery_low:void,battery_critical:void,log_full:void,crash_detected:void,override:void};Color={red:u8,green:u8,blue:u8};LEDStateColors={right_front:Color,right_back:Color,left_front:Color,left_back:Color};LEDStateCase={status:StatusFlag,pattern:u8,colors:LEDStateColors,indicator_red:bool,indicator_green:bool};LEDStates=[/16/LEDStateCase:16];LEDStatesFixed=[LEDStateCase:16];DeviceName=s9;InertialBias={accel:Vector3f,gyro:Vector3f};VelocityPIDBypass={/8/forward_master:void,right_master:void,up_master:void,_unused_master:void,forward_slave:void,right_slave:void,up_slave:void,_unused_slave:void};VelocityPIDParameters={forward_master:PIDSettings,right_master:PIDSettings,up_master:PIDSettings,forward_slave:PIDSettings,right_slave:PIDSettings,up_slave:PIDSettings,pid_bypass:VelocityPIDBypass};Configuration={/16/version:Version,id:ConfigID,pcb_transform:PcbTransform,mix_table:MixTable,mag_bias:MagBias,channel:ChannelProperties,pid_parameters:PIDParameters,state_parameters:StateParameters,led_states:LEDStates,name:DeviceName,velocity_pid_parameters:VelocityPIDParameters,inertial_bias:InertialBias};ConfigurationFixed={version:Version,id:ConfigID,pcb_transform:PcbTransform,mix_table:MixTable,mag_bias:MagBias,channel:ChannelProperties,pid_parameters:PIDParameters,state_parameters:StateParameters,led_states:LEDStatesFixed,name:DeviceName,velocity_pid_parameters:VelocityPIDParameters,inertial_bias:InertialBias};ConfigurationFlag={/16/version:void,id:void,pcb_transform:void,mix_table:void,mag_bias:void,channel:void,pid_parameters:void,state_parameters:void,led_states:[//void:16],name:void,velocity_pid_parameters:void,inertial_bias:void};Rotation={pitch:f32,roll:f32,yaw:f32};PIDState={timestamp_us:u32,input:f32,setpoint:f32,p_term:f32,i_term:f32,d_term:f32};RcCommand={throttle:i16,pitch:i16,roll:i16,yaw:i16};State={/32/timestamp_us:u32,status:StatusFlag,v0_raw:u16,i0_raw:u16,i1_raw:u16,accel:Vector3f,gyro:Vector3f,mag:Vector3f,temperature:u16,pressure:u32,ppm:[i16:6],aux_chan_mask:u8,command:RcCommand,control:{fz:f32,tx:f32,ty:f32,tz:f32},pid_master_fz:PIDState,pid_master_tx:PIDState,pid_master_ty:PIDState,pid_master_tz:PIDState,pid_slave_fz:PIDState,pid_slave_tx:PIDState,pid_slave_ty:PIDState,pid_slave_tz:PIDState,motor_out:[i16:8],kinematics_angle:Rotation,kinematics_rate:Rotation,kinematics_altitude:f32,loop_count:u32};StateFields={/32/timestamp_us:void,status:void,v0_raw:void,i0_raw:void,i1_raw:void,accel:void,gyro:void,mag:void,temperature:void,pressure:void,ppm:void,aux_chan_mask:void,command:void,control:void,pid_master_fz:void,pid_master_tx:void,pid_master_ty:void,pid_master_tz:void,pid_slave_fz:void,pid_slave_tx:void,pid_slave_ty:void,pid_slave_tz:void,motor_out:void,kinematics_angle:void,kinematics_rate:void,kinematics_altitude:void,loop_count:void};AuxMask={//aux1_low:void,aux1_mid:void,aux1_high:void,aux2_low:void,aux2_mid:void,aux2_high:void};Command={/32/request_response:void,set_eeprom_data:ConfigurationFixed,reinit_eeprom_data:void,request_eeprom_data:void,request_enable_iteration:u8,motor_override_speed_0:u16,motor_override_speed_1:u16,motor_override_speed_2:u16,motor_override_speed_3:u16,motor_override_speed_4:u16,motor_override_speed_5:u16,motor_override_speed_6:u16,motor_override_speed_7:u16,set_command_override:bool,set_state_mask:StateFields,set_state_delay:u16,set_sd_write_delay:u16,set_led:{pattern:u8,color_right:Color,color_left:Color,indicator_red:bool,indicator_green:bool},set_serial_rc:{enabled:bool,command:RcCommand,aux_mask:AuxMask},set_card_recording_state:{/8/record_to_card:void,lock_recording_state:void},set_partial_eeprom_data:Configuration,reinit_partial_eeprom_data:ConfigurationFlag,req_partial_eeprom_data:ConfigurationFlag,req_card_recording_state:void,set_partial_temporary_config:Configuration,set_command_sources:{/8/serial:void,radio:void},set_calibration:{enabled:bool,mode:u8},set_autopilot_enabled:bool,set_usb_mode:u8};DebugString={deprecated_mask:u32,message:s};HistoryData=DebugString;Response={mask:u32,ack:u32};"}}}e.$inject=[],angular.module("flybrixCommon").factory("descriptorsHandler",e)}(),function(){"use strict";function e(a,i){return{magnetometer:function(){return a("Calibrating magnetometer bias"),i.sendStructure("Command",{request_response:!0,set_calibration:{enabled:!0,mode:0}},!1)},accelerometer:{flat:e.bind(null,"flat",0),forward:e.bind(null,"lean forward",1),back:e.bind(null,"lean back",2),right:e.bind(null,"lean right",3),left:e.bind(null,"lean left",4)},finish:function(){return a("Finishing calibration"),i.sendStructure("Command",{request_response:!0,set_calibration:{enabled:!1,mode:0}},!1)}};function e(e,t){return a("Calibrating gravity for pose: "+e),i.sendStructure("Command",{request_response:!0,set_calibration:{enabled:!0,mode:t+1}},!1)}}angular.module("flybrixCommon").factory("calibration",e),e.$inject=["commandLog","serial"]}(),function(){"use strict";function e(e){void 0===e&&(e=2e3),this.N=e,this.buffer=new Uint8Array(e),this.ready_for_new_message=!0,this.buffer_length=0}function _(e){for(var t=0,a=0,i=0,r=!1;e.buffer[t];)i?(--i,e.buffer[a++]=e.buffer[t++]):(r&&(e.buffer[a++]=0),r=(i=e.buffer[t++]-1)<254);return i?0:a}function t(e){for(var t=new Uint8Array(Math.floor((255*e.byteLength+761)/254)),a=1,i=0,r=0;r<e.length;++r){254==t[i]&&(t[i]=255,t[i=a++]=0);var o=e[r];++t[i],o?t[a++]=o:t[i=a++]=0}return t.subarray(0,a).slice().buffer}angular.module("flybrixCommon").factory("cobs",function(){return{Reader:e,encode:t}}),e.prototype.readBytes=function(e,t,a){for(var i=0;i<e.length;i++){var r=e[i];if(this.ready_for_new_message&&(this.ready_for_new_message=!1,this.buffer_length=0),this.buffer[this.buffer_length++]=r)this.buffer_length===this.N&&(a("overflow","buffer overflow in COBS decoding"),this.ready_for_new_message=!0);else{this.buffer_length=_(this);var o,n=0===this.buffer_length;for(n&&(this.buffer[0]=1),o=1;o<this.buffer_length;++o)this.buffer[0]^=this.buffer[o];if(0===this.buffer[0])this.ready_for_new_message=!0,0<this.buffer_length?t(this.buffer.slice(1,this.buffer_length)):a("short","Too short packet");else{this.ready_for_new_message=!0;var s="",d="";for(o=0;o<this.buffer_length;o++)s+=this.buffer[o]+",",d+=String.fromCharCode(this.buffer[o]);if(n)a("frame","Unexpected ending of packet");else a("checksum","BAD CHECKSUM ("+this.buffer_length+" bytes)"+s+d)}}}}}(),function(){"use strict";function e(e){var t=[],a=e.defer(),i=r;return i.log=r,i.clearSubscribers=function(){a=e.defer()},i.onMessage=function(e){return a.promise.then(void 0,void 0,e)},i.read=o,i;function r(e){void 0!==e&&(t.push(e),a.notify(o()))}function o(){return t}}angular.module("flybrixCommon").factory("commandLog",e),e.$inject=["$q"]}(),function(){"use strict";function e(n,a,s,i){var d,r=function(){a("No callback defined for receiving configurations!")},o=function(){a("No callback defined for receiving logging state! Callback arguments: (isLogging, isLocked, delay)")};function _(){var e=s.serializationHandler();return a("Requesting current configuration data..."),n.sendStructure("Command",{request_response:!0,req_partial_eeprom_data:e.ConfigurationFlag.empty()},!1)}function t(e){var t=s.serializationHandler(),a=e.mask||t.ConfigurationFlag.empty(),i=e.config||d,r=e.requestUpdate||!1,o={request_response:!0};return e.temporary?(o.set_partial_temporary_config=i,a={set_partial_temporary_config:a}):(o.set_partial_eeprom_data=i,a={set_partial_eeprom_data:a}),n.sendStructure("Command",o,!0,a).then(function(){r&&_()})}function u(e){var t=[(d=i.updateFields(d,e)).version.major,d.version.minor,d.version.patch];s.set(t),s.supported()?(a("Received configuration data (v"+t[0]+"."+t[1]+"."+t[2]+")"),r()):(a("Received an unsupported configuration!"),a("Found version: "+t[0]+"."+t[1]+"."+t[2]+" --- Newest version: "+s.desiredKey()))}return n.addOnReceiveCallback(function(e,t){if("Command"===e&&("set_eeprom_data"in t&&u(t.set_eeprom_data),"set_partial_eeprom_data"in t&&u(t.set_partial_eeprom_data),"set_card_recording_state"in t&&"set_sd_write_delay"in t)){var a=t.set_card_recording_state,i=t.set_sd_write_delay;o(a.record_to_card,a.lock_recording_state,i)}}),d=s.serializationHandler().Configuration.empty(),{request:_,reinit:function(){return a("Setting factory default configuration data..."),n.sendStructure("Command",{request_response:!0,reinit_eeprom_data:!0},!1).then(function(){return _()},function(e){a("Request for factory reset failed: "+e)})},send:function(e){return t({config:e,temporary:!1,requestUpdate:!0})},sendConfig:t,getConfig:function(){return d},setConfigCallback:function(e){r=e},setLoggingCallback:function(e){o=e},getDesiredVersion:function(){return s.desired()}}}angular.module("flybrixCommon").factory("deviceConfig",e),e.$inject=["serial","commandLog","firmwareVersion","serializationHandler"]}(),function(){"use strict";function e(t){var a=[0,0,0],i="0.0.0",e=t.getNewestVersion(),r=[e.major,e.minor,e.patch],o=r[0].toString()+"."+r[1].toString()+"."+r[2].toString(),n=t.getHandler(o),s=n;return{set:function(e){i=(a=e).join("."),s=t.getHandler(o)||n},get:function(){return a},key:function(){return i},supported:function(){return!!t.getHandler(i)},desired:function(){return r},desiredKey:function(){return o},serializationHandler:function(){return s}}}angular.module("flybrixCommon").factory("firmwareVersion",e),e.$inject=["serializationHandler"]}(),function(){"use strict";function e(s,d){var r={NO_OVERRIDE:0,FLASH:1,BEACON:2,BREATHE:3,ALTERNATE:4,SOLID:5},_=["right_front","right_back","left_front","left_back"],u={};_.forEach(function(e){u[e]={red:0,green:0,blue:0}});var l={status:65535,pattern:r.SOLID,colors:u,indicator_red:!1,indicator_green:!1},m={led_states:[l]};function o(e,t,a,i,r,o,n){l.status=d.serializationHandler().StatusFlag.empty(),0<r&&r<6&&(l.pattern=r),[e,t,a,i].forEach(function(e,t){if(e){var a=u[_[t]];a.red=e.red,a.green=e.green,a.blue=e.blue}}),void 0!==o&&(l.indicator_red=o),void 0!==n&&(l.indicator_green=n),s.sendConfig({config:m,temporary:!0})}return{set:o,setSimple:function(e,t,a){var i={red:e||0,green:t||0,blue:a||0};o(i,i,i,i,r.SOLID)},patterns:r}}angular.module("flybrixCommon").factory("led",e),e.$inject=["deviceConfig","firmwareVersion"]}(),function(){"use strict";function e(a){var e={LOW:0,MID:1,HIGH:2},i=["low","mid","high"],r=-1,o=0,n=0,s=0,d=e.HIGH,_=e.HIGH,u=!0;return{setThrottle:function(e){r=e},setPitch:function(e){o=e},setRoll:function(e){n=e},setYaw:function(e){s=e},setAux1:function(e){d=Math.max(0,Math.min(2,e))},setAux2:function(e){_=Math.max(0,Math.min(2,e))},getThrottle:function(){return r},getPitch:function(){return o},getRoll:function(){return n},getYaw:function(){return s},getAux1:function(){return d},getAux2:function(){return _},AUX:e,send:function(){if(!u&&a.busy())return;u=!1;var e={};e.throttle=l(4095*(r- -.8)/1.8,0,4095),e.pitch=l(4095*-m(o,.1)/2,-2047,2047),e.roll=l(4095*m(n,.1)/2,-2047,2047),e.yaw=l(4095*-m(s,.1)/2,-2047,2047);var t={};return t["aux1_"+i[d]]=!0,t["aux2_"+i[_]]=!0,a.sendStructure("Command",{request_response:!0,set_serial_rc:{enabled:!0,command:e,aux_mask:t}},!1)},forceNextSend:function(){u=!0}};function l(e,t,a){return Math.max(t,Math.min(e,a))}function m(e,t){return t<e?e-t:e<-t?e+t:0}}angular.module("flybrixCommon").factory("rcData",e),e.$inject=["serial"]}(),function(){"use strict";function e(f,v,p,g,b,h){var y={State:0,Command:1,DebugString:3,HistoryData:4,Protocol:128,Response:255},S=[],D=new e,o=[],t=new p.Reader(1e4),a=void 0;function e(){}e.prototype.busy=function(){return!1},e.prototype.send=function(e){g('No "send" defined for serial backend')},e.prototype.onRead=function(e){g('No "onRead" defined for serial backend')};var n,s=[];return Object.keys(y).forEach(function(e){s[y[e]]=e}),_(function(e,t){if("Response"===e)!function(e,t){for(;0<S.length;){var a=S.shift();if(!(a.mask^e)){var i=e;if((i&=-2)^t){a.response.reject("Request was not fully processed");break}a.response.resolve();break}a.response.reject("Missing ACK")}}(t.mask,t.ack);else if("Protocol"===e){var a=t.response;a&&h.addHandler(a.version,a.structure)}}),{busy:function(){return D.busy()},sendStructure:i,setBackend:function(e){(D=e).onRead=r},addOnReceiveCallback:_,removeOnReceiveCallback:function(t){o=o.filter(function(e){return e!==t})},setBytesHandler:function(e){a=e},handlePostConnect:function(){return i("Command",{request_response:!0,req_partial_eeprom_data:{version:!0}})},Backend:e};function i(e,t,a,i){"State"===e&&(t=function(e){"temperature"in(e=Object.assign({},e))&&(e.temperature*=100);"pressure"in e&&(e.pressure*=256);return e}(t));var r=b.serializationHandler(),o=v.defer();if(!(e in y))return o.reject('Message type "'+e+'" not supported by app, supported message types are:'+Object.keys(y).join(", ")),o.promise;if(!(e in r))return o.reject('Message type "'+e+'" not supported by firmware, supported message types are:'+Object.keys(r).join(", ")),o.promise;var n=y[e],s=r[e],d=new Uint8Array(s.byteCount),_=new h.Serializer(new DataView(d.buffer));s.encode(_,t,i);var u=s.maskArray(t,i);u.length<5&&(u=u[0]<<0|u[1]<<8|u[2]<<16|u[3]<<24);var l=_.index,m=new Uint8Array(l+3);m[0]=m[1]=n;for(var c=0;c<l;++c)m[0]^=m[c+2]=d[c];return m[l+2]=0,S.push({mask:u,response:o}),f(function(){D.send(new Uint8Array(p.encode(m)))},0),a&&g("Sending command "+n),o.promise}function r(e){a?a(e,u):t.readBytes(e,u,d)}function d(e,t){g("COBS decoding failed ("+e+"): "+t)}function _(e){o=o.concat([e])}function u(e){var t=s[e[0]],a=b.serializationHandler()[t];if(t&&a){try{var i=new h.Serializer(new DataView(e.buffer,1)),r=a.decode(i)}catch(e){g("Unrecognized message format received")}"State"===t&&(r=function(e){e=Object.assign({},e);"timestamp_us"in e&&(e.serial_update_rate_estimate=1e6/(e.timestamp_us-n),n=e.timestamp_us);"temperature"in e&&(e.temperature/=100);"pressure"in e&&(e.pressure/=256);return e}(r)),o.forEach(function(e){e(t,r)})}else g("Illegal message type passed from firmware")}}angular.module("flybrixCommon").factory("serial",e),e.$inject=["$timeout","$q","cobs","commandLog","firmwareVersion","serializationHandler"]}(),function(){"use strict";function e(e){var a={},i={major:0,minor:0,patch:0};function r(e){return e.major!==i.major?e.major>i.major:e.minor!==i.minor?e.minor>i.minor:e.patch>i.patch}function o(e){return e.major.toString()+"."+e.minor.toString()+"."+e.patch.toString()}function n(e,t){r(e)&&(i={major:e.major,minor:e.minor,patch:e.patch}),a[o(e)]=FlybrixSerialization.parse(t)}function s(e,t){r(e)&&(i={major:e.major,minor:e.minor,patch:e.patch}),a[o(e)]=a[o(t)]}var d=e.versions,_=e.files,u={};function l(e,t){return t instanceof Array?function(e,t){for(var a=Math.max(e.length,t.length),i=[],r=0;r<a;++r)i.push(l(e[r],t[r]));return i}(e,t):t instanceof Object?(a=e,i=t,r={},Object.keys(a).forEach(function(e){r[e]=l(a[e],i[e])}),Object.keys(i).forEach(function(e){e in r||(r[e]=l(a[e],i[e]))}),r):null==t?e:t;var a,i,r}return Object.keys(d).forEach(function(e){var t,a=(t=e.split("."),{major:parseInt(t[0]),minor:parseInt(t[1]),patch:parseInt(t[2])}),i=_[e];i in u?s(a,u[i]):(i=d[e],n(a,_[i]),u[i]=a)}),{Serializer:FlybrixSerialization.Serializer,getHandler:function(e){return a[e]},getNewestVersion:function(){return i},addHandler:n,copyHandler:s,updateFields:l}}e.$inject=["descriptorsHandler"],angular.module("flybrixCommon").factory("serializationHandler",e)}();
//# sourceMappingURL=data:application/json;charset=utf8;base64,
